{"$message_type":"diagnostic","message":"empty line after doc comment","code":{"code":"clippy::empty_line_after_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":599,"byte_end":599,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"use core::mem::MaybeUninit;","highlight_start":1,"highlight_end":1}],"label":"the comment documents this `use` import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":535,"byte_end":597,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"///! - **Kernel-Only**: Secret key never leaves kernel space","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::empty_line_after_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if the empty line is unintentional, remove it","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":595,"byte_end":597,"line_start":11,"line_end":12,"column_start":61,"column_end":1,"is_primary":true,"text":[{"text":"///! - **Kernel-Only**: Secret key never leaves kernel space","highlight_start":61,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if the comment should document the parent module use an inner doc comment","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":2,"byte_end":3,"line_start":1,"line_end":1,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! Capability Sealing - Cryptographic protection against forgery","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":70,"byte_end":71,"line_start":2,"line_end":2,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///!","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":76,"byte_end":77,"line_start":3,"line_end":3,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! This module implements unforgeable capability seals using HMAC-SHA256.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":153,"byte_end":154,"line_start":4,"line_end":4,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! Each capability is sealed with a kernel-only secret key, preventing","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":227,"byte_end":228,"line_start":5,"line_end":5,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! user space from forging or tampering with capabilities.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":289,"byte_end":290,"line_start":6,"line_end":6,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///!","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":295,"byte_end":296,"line_start":7,"line_end":7,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! # Security Properties","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":323,"byte_end":324,"line_start":8,"line_end":8,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! - **Unforgeable**: Can't create valid seal without kernel secret key","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":398,"byte_end":399,"line_start":9,"line_end":9,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! - **Tamper-Proof**: Modifying capability data invalidates seal","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":467,"byte_end":468,"line_start":10,"line_end":10,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! - **Constant-Time**: Verification uses constant-time comparison","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":537,"byte_end":538,"line_start":11,"line_end":11,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///! - **Kernel-Only**: Secret key never leaves kernel space","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: empty line after doc comment\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\sealing.rs:11:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m11\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m ///! - **Kernel-Only**: Secret key never leaves kernel space\n\u001b[1m\u001b[96m12\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_^\u001b[0m\n\u001b[1m\u001b[96m13\u001b[0m \u001b[1m\u001b[96m|\u001b[0m   use core::mem::MaybeUninit;\n   \u001b[1m\u001b[96m|\u001b[0m   \u001b[1m\u001b[96m-\u001b[0m \u001b[1m\u001b[96mthe comment documents this `use` import\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: if the empty line is unintentional, remove it\n\u001b[1m\u001b[96mhelp\u001b[0m: if the comment should document the parent module use an inner doc comment\n   \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m1\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! Capability Sealing - Cryptographic protection against forgery\n \u001b[1m\u001b[96m2\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m!\n \u001b[1m\u001b[96m3\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! This module implements unforgeable capability seals using HMAC-SHA256.\n \u001b[1m\u001b[96m4\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! Each capability is sealed with a kernel-only secret key, preventing\n \u001b[1m\u001b[96m5\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! user space from forging or tampering with capabilities.\n \u001b[1m\u001b[96m6\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m!\n \u001b[1m\u001b[96m7\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! # Security Properties\n \u001b[1m\u001b[96m8\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! - **Unforgeable**: Can't create valid seal without kernel secret key\n \u001b[1m\u001b[96m9\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! - **Tamper-Proof**: Modifying capability data invalidates seal\n\u001b[1m\u001b[96m10\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! - **Constant-Time**: Verification uses constant-time comparison\n\u001b[1m\u001b[96m11\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m! - **Kernel-Only**: Secret key never leaves kernel space\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"empty line after doc comment","code":{"code":"clippy::empty_line_after_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":302,"byte_end":302,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"use crate::loom_of_fate::{without_interrupts, ThreadState};","highlight_start":1,"highlight_end":1}],"label":"the comment documents this `use` import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":236,"byte_end":301,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"/// checks to ensure protection is active and working correctly.","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if the empty line is unintentional, remove it","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":300,"byte_end":301,"line_start":5,"line_end":6,"column_start":65,"column_end":1,"is_primary":true,"text":[{"text":"/// checks to ensure protection is active and working correctly.","highlight_start":65,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if the comment should document the parent module use an inner doc comment","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":2,"byte_end":3,"line_start":1,"line_end":1,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// SIGILS - Display The Weaver's Sigils (stack canaries) for all threads","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":76,"byte_end":77,"line_start":2,"line_end":2,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":80,"byte_end":81,"line_start":3,"line_end":3,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// This command shows the status of stack and heap canary protection without","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":158,"byte_end":159,"line_start":4,"line_end":4,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// exposing actual canary values (for security). It performs real verification","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\sigils_command.rs","byte_start":238,"byte_end":239,"line_start":5,"line_end":5,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// checks to ensure protection is active and working correctly.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: empty line after doc comment\u001b[0m\n \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\sigils_command.rs:5:1\n  \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m5\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m /// checks to ensure protection is active and working correctly.\n\u001b[1m\u001b[96m6\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m\n  \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_^\u001b[0m\n\u001b[1m\u001b[96m7\u001b[0m \u001b[1m\u001b[96m|\u001b[0m   use crate::loom_of_fate::{without_interrupts, ThreadState};\n  \u001b[1m\u001b[96m|\u001b[0m   \u001b[1m\u001b[96m-\u001b[0m \u001b[1m\u001b[96mthe comment documents this `use` import\u001b[0m\n  \u001b[1m\u001b[96m|\u001b[0m\n  \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n  \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: if the empty line is unintentional, remove it\n\u001b[1m\u001b[96mhelp\u001b[0m: if the comment should document the parent module use an inner doc comment\n  \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m1\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m SIGILS - Display The Weaver's Sigils (stack canaries) for all threads\n\u001b[1m\u001b[96m2\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m\n\u001b[1m\u001b[96m3\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m This command shows the status of stack and heap canary protection without\n\u001b[1m\u001b[96m4\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m exposing actual canary values (for security). It performs real verification\n\u001b[1m\u001b[96m5\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m checks to ensure protection is active and working correctly.\n  \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"empty line after doc comment","code":{"code":"clippy::empty_line_after_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":240,"byte_end":240,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"use crate::mana_pool::rune_of_permanence;","highlight_start":1,"highlight_end":1}],"label":"the comment documents this `use` import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":216,"byte_end":239,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"/// and memory layout.","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if the empty line is unintentional, remove it","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":238,"byte_end":239,"line_start":5,"line_end":6,"column_start":23,"column_end":1,"is_primary":true,"text":[{"text":"/// and memory layout.","highlight_start":23,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if the comment should document the parent module use an inner doc comment","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":2,"byte_end":3,"line_start":1,"line_end":1,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// PERMANENCE - Display The Rune of Permanence status","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":57,"byte_end":58,"line_start":2,"line_end":2,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":61,"byte_end":62,"line_start":3,"line_end":3,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// This command shows detailed information about kernel structures protected","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":139,"byte_end":140,"line_start":4,"line_end":4,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// by The Rune of Permanence, including sealing status, protected structures,","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\permanence_command.rs","byte_start":218,"byte_end":219,"line_start":5,"line_end":5,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// and memory layout.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: empty line after doc comment\u001b[0m\n \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\permanence_command.rs:5:1\n  \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m5\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m /// and memory layout.\n\u001b[1m\u001b[96m6\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m\n  \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_^\u001b[0m\n\u001b[1m\u001b[96m7\u001b[0m \u001b[1m\u001b[96m|\u001b[0m   use crate::mana_pool::rune_of_permanence;\n  \u001b[1m\u001b[96m|\u001b[0m   \u001b[1m\u001b[96m-\u001b[0m \u001b[1m\u001b[96mthe comment documents this `use` import\u001b[0m\n  \u001b[1m\u001b[96m|\u001b[0m\n  \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n  \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: if the empty line is unintentional, remove it\n\u001b[1m\u001b[96mhelp\u001b[0m: if the comment should document the parent module use an inner doc comment\n  \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m1\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m PERMANENCE - Display The Rune of Permanence status\n\u001b[1m\u001b[96m2\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m\n\u001b[1m\u001b[96m3\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m This command shows detailed information about kernel structures protected\n\u001b[1m\u001b[96m4\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m by The Rune of Permanence, including sealing status, protected structures,\n\u001b[1m\u001b[96m5\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m and memory layout.\n  \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"empty line after doc comment","code":{"code":"clippy::empty_line_after_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\fate_command.rs","byte_start":582,"byte_end":582,"line_start":14,"line_end":14,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"use crate::mana_pool::concordance_of_fates::{self, SubjectId, SubjectType};","highlight_start":1,"highlight_end":1}],"label":"the comment documents this `use` import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":527,"byte_end":580,"line_start":12,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"///   fate status         - Show Concordance status","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if the empty line is unintentional, remove it","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\fate_command.rs","byte_start":578,"byte_end":580,"line_start":12,"line_end":13,"column_start":52,"column_end":1,"is_primary":true,"text":[{"text":"///   fate status         - Show Concordance status","highlight_start":52,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if the comment should document the parent module use an inner doc comment","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\fate_command.rs","byte_start":2,"byte_end":3,"line_start":1,"line_end":1,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// FATE - Manage the Concordance of Fates (RBAC system)","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":60,"byte_end":61,"line_start":2,"line_end":2,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":65,"byte_end":66,"line_start":3,"line_end":3,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// This command provides runtime management of Roles (Fates) and Subject","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":140,"byte_end":141,"line_start":4,"line_end":4,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// assignments, similar to grsecurity's gradm utility.","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":197,"byte_end":198,"line_start":5,"line_end":5,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":202,"byte_end":203,"line_start":6,"line_end":6,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"/// Commands:","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":217,"byte_end":218,"line_start":7,"line_end":7,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate list           - List all defined Fates","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":269,"byte_end":270,"line_start":8,"line_end":8,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate show <name>    - Show details of a specific Fate","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":330,"byte_end":331,"line_start":9,"line_end":9,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate subjects       - List all Subjects and their assigned Fates","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":402,"byte_end":403,"line_start":10,"line_end":10,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate assign <id> <fate> - Assign a Fate to a Subject","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":462,"byte_end":463,"line_start":11,"line_end":11,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate seal           - Seal the Concordance (make immutable)","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\fate_command.rs","byte_start":529,"byte_end":530,"line_start":12,"line_end":12,"column_start":3,"column_end":4,"is_primary":true,"text":[{"text":"///   fate status         - Show Concordance status","highlight_start":3,"highlight_end":4}],"label":null,"suggested_replacement":"!","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: empty line after doc comment\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\fate_command.rs:12:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m12\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m ///   fate status         - Show Concordance status\n\u001b[1m\u001b[96m13\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_^\u001b[0m\n\u001b[1m\u001b[96m14\u001b[0m \u001b[1m\u001b[96m|\u001b[0m   use crate::mana_pool::concordance_of_fates::{self, SubjectId, SubjectType};\n   \u001b[1m\u001b[96m|\u001b[0m   \u001b[1m\u001b[96m-\u001b[0m \u001b[1m\u001b[96mthe comment documents this `use` import\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: if the empty line is unintentional, remove it\n\u001b[1m\u001b[96mhelp\u001b[0m: if the comment should document the parent module use an inner doc comment\n   \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m1\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m FATE - Manage the Concordance of Fates (RBAC system)\n \u001b[1m\u001b[96m2\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m\n \u001b[1m\u001b[96m3\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m This command provides runtime management of Roles (Fates) and Subject\n \u001b[1m\u001b[96m4\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m assignments, similar to grsecurity's gradm utility.\n \u001b[1m\u001b[96m5\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m\n \u001b[1m\u001b[96m6\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m Commands:\n \u001b[1m\u001b[96m7\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate list           - List all defined Fates\n \u001b[1m\u001b[96m8\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate show <name>    - Show details of a specific Fate\n \u001b[1m\u001b[96m9\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate subjects       - List all Subjects and their assigned Fates\n\u001b[1m\u001b[96m10\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate assign <id> <fate> - Assign a Fate to a Subject\n\u001b[1m\u001b[96m11\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate seal           - Seal the Concordance (make immutable)\n\u001b[1m\u001b[96m12\u001b[0m \u001b[92m~ \u001b[0m//\u001b[92m!\u001b[0m   fate status         - Show Concordance status\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `alloc::vec::Vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":351,"byte_end":366,"line_start":10,"line_end":10,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloc::vec::Vec;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` (part of `#[warn(unused)]`) on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":347,"byte_end":368,"line_start":10,"line_end":11,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloc::vec::Vec;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unused import: `alloc::vec::Vec`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\superblock.rs:10:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m10\u001b[0m \u001b[1m\u001b[96m|\u001b[0m use alloc::vec::Vec;\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(unused_imports)]` (part of `#[warn(unused)]`) on by default\n\n"}
{"$message_type":"diagnostic","message":"unused import: `alloc::vec::Vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\inode.rs","byte_start":393,"byte_end":408,"line_start":11,"line_end":11,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use alloc::vec::Vec;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\inode.rs","byte_start":389,"byte_end":410,"line_start":11,"line_end":12,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloc::vec::Vec;","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unused import: `alloc::vec::Vec`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\inode.rs:11:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m11\u001b[0m \u001b[1m\u001b[96m|\u001b[0m use alloc::vec::Vec;\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `alloc::string::ToString`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\mod.rs","byte_start":1085,"byte_end":1108,"line_start":39,"line_end":39,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use alloc::string::ToString;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\mod.rs","byte_start":1081,"byte_end":1110,"line_start":39,"line_end":40,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use alloc::string::ToString;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unused import: `alloc::string::ToString`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\mod.rs:39:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m39\u001b[0m \u001b[1m\u001b[96m|\u001b[0m use alloc::string::ToString;\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\bpb.rs","byte_start":10087,"byte_end":10093,"line_start":285,"line_end":285,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        unsafe {","highlight_start":9,"highlight_end":15}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_unsafe)]` (part of `#[warn(unused)]`) on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unnecessary `unsafe` block\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\bpb.rs:285:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m285\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         unsafe {\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^\u001b[0m \u001b[1m\u001b[93munnecessary `unsafe` block\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(unused_unsafe)]` (part of `#[warn(unused)]`) on by default\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\bpb.rs","byte_start":10252,"byte_end":10258,"line_start":292,"line_end":292,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        unsafe {","highlight_start":9,"highlight_end":15}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unnecessary `unsafe` block\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\bpb.rs:292:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m292\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         unsafe {\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^\u001b[0m \u001b[1m\u001b[93munnecessary `unsafe` block\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\mod.rs","byte_start":1623,"byte_end":1629,"line_start":61,"line_end":61,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        unsafe {","highlight_start":9,"highlight_end":15}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unnecessary `unsafe` block\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\mod.rs:61:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m61\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         unsafe {\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^\u001b[0m \u001b[1m\u001b[93munnecessary `unsafe` block\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\mod.rs","byte_start":1789,"byte_end":1795,"line_start":68,"line_end":68,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        unsafe {","highlight_start":9,"highlight_end":15}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unnecessary `unsafe` block\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\mod.rs:68:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m68\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         unsafe {\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^\u001b[0m \u001b[1m\u001b[93munnecessary `unsafe` block\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `entry_type`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\mod.rs","byte_start":3756,"byte_end":3766,"line_start":123,"line_end":123,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"                Some((inode_num, entry_type)) => {","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\mod.rs","byte_start":3756,"byte_end":3766,"line_start":123,"line_end":123,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"                Some((inode_num, entry_type)) => {","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":"_entry_type","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unused variable: `entry_type`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\mod.rs:123:34\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m123\u001b[0m \u001b[1m\u001b[96m|\u001b[0m                 Some((inode_num, entry_type)) => {\n    \u001b[1m\u001b[96m|\u001b[0m                                  \u001b[1m\u001b[93m^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: if this is intentional, prefix it with an underscore: `_entry_type`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `error`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":4587,"byte_end":4592,"line_start":138,"line_end":138,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"                    let error = inb(bus + ATA_REG_ERROR);","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":4587,"byte_end":4592,"line_start":138,"line_end":138,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"                    let error = inb(bus + ATA_REG_ERROR);","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"_error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unused variable: `error`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\ata.rs:138:25\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m138\u001b[0m \u001b[1m\u001b[96m|\u001b[0m                     let error = inb(bus + ATA_REG_ERROR);\n    \u001b[1m\u001b[96m|\u001b[0m                         \u001b[1m\u001b[93m^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: if this is intentional, prefix it with an underscore: `_error`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated function `new` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\capability.rs","byte_start":1444,"byte_end":1461,"line_start":49,"line_end":49,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"impl CapabilityId {","highlight_start":1,"highlight_end":18}],"label":"associated function in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\mana_pool\\capability.rs","byte_start":1517,"byte_end":1520,"line_start":51,"line_end":51,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"    pub(crate) fn new(id: u64) -> Self {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: associated function `new` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\capability.rs:51:19\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m49\u001b[0m \u001b[1m\u001b[96m|\u001b[0m impl CapabilityId {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[96m-----------------\u001b[0m \u001b[1m\u001b[96massociated function in this implementation\u001b[0m\n\u001b[1m\u001b[96m50\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     /// Create a new capability ID\n\u001b[1m\u001b[96m51\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     pub(crate) fn new(id: u64) -> Self {\n   \u001b[1m\u001b[96m|\u001b[0m                   \u001b[1m\u001b[93m^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default\n\n"}
{"$message_type":"diagnostic","message":"field `seal` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\capability.rs","byte_start":2419,"byte_end":2435,"line_start":83,"line_end":83,"column_start":12,"column_end":28,"is_primary":false,"text":[{"text":"pub struct SealedCapability {","highlight_start":12,"highlight_end":28}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\mana_pool\\capability.rs","byte_start":2794,"byte_end":2798,"line_start":95,"line_end":95,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    seal: [u8; 32],","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`SealedCapability` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: field `seal` is never read\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\capability.rs:95:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m83\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub struct SealedCapability {\n   \u001b[1m\u001b[96m|\u001b[0m            \u001b[1m\u001b[96m----------------\u001b[0m \u001b[1m\u001b[96mfield in this struct\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m95\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     seal: [u8; 32],\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `SealedCapability` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n"}
{"$message_type":"diagnostic","message":"constant `CPUID_EXTENDED_FEATURES` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":1744,"byte_end":1767,"line_start":40,"line_end":40,"column_start":7,"column_end":30,"is_primary":true,"text":[{"text":"const CPUID_EXTENDED_FEATURES: u32 = 0x07;","highlight_start":7,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `CPUID_EXTENDED_FEATURES` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_sacred_boundaries.rs:40:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m40\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const CPUID_EXTENDED_FEATURES: u32 = 0x07;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `eh_magic`, `eh_max`, and `eh_generation` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":622,"byte_end":634,"line_start":19,"line_end":19,"column_start":8,"column_end":20,"is_primary":false,"text":[{"text":"struct ExtentHeader {","highlight_start":8,"highlight_end":20}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":671,"byte_end":679,"line_start":21,"line_end":21,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    eh_magic: u16,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":816,"byte_end":822,"line_start":25,"line_end":25,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    eh_max: u16,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":938,"byte_end":951,"line_start":29,"line_end":29,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    eh_generation: u32,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ExtentHeader` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: fields `eh_magic`, `eh_max`, and `eh_generation` are never read\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\extent.rs:21:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m19\u001b[0m \u001b[1m\u001b[96m|\u001b[0m struct ExtentHeader {\n   \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[96m------------\u001b[0m \u001b[1m\u001b[96mfields in this struct\u001b[0m\n\u001b[1m\u001b[96m20\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     /// Magic number (0xF30A)\n\u001b[1m\u001b[96m21\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     eh_magic: u16,\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m25\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     eh_max: u16,\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m29\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     eh_generation: u32,\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `ExtentHeader` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n"}
{"$message_type":"diagnostic","message":"field `ei_unused` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":1870,"byte_end":1881,"line_start":65,"line_end":65,"column_start":8,"column_end":19,"is_primary":false,"text":[{"text":"struct ExtentIndex {","highlight_start":8,"highlight_end":19}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":2122,"byte_end":2131,"line_start":73,"line_end":73,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    ei_unused: u16,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ExtentIndex` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: field `ei_unused` is never read\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\extent.rs:73:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m65\u001b[0m \u001b[1m\u001b[96m|\u001b[0m struct ExtentIndex {\n   \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[96m-----------\u001b[0m \u001b[1m\u001b[96mfield in this struct\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m73\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     ei_unused: u16,\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `ExtentIndex` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_UNKNOWN` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":515,"byte_end":530,"line_start":16,"line_end":16,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"const EXT4_FT_UNKNOWN: u8 = 0;","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_UNKNOWN` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:16:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m16\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_UNKNOWN: u8 = 0;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_REG_FILE` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":546,"byte_end":562,"line_start":17,"line_end":17,"column_start":7,"column_end":23,"is_primary":true,"text":[{"text":"const EXT4_FT_REG_FILE: u8 = 1;","highlight_start":7,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_REG_FILE` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:17:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m17\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_REG_FILE: u8 = 1;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_CHRDEV` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":605,"byte_end":619,"line_start":19,"line_end":19,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"const EXT4_FT_CHRDEV: u8 = 3;","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_CHRDEV` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:19:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m19\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_CHRDEV: u8 = 3;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_BLKDEV` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":635,"byte_end":649,"line_start":20,"line_end":20,"column_start":7,"column_end":21,"is_primary":true,"text":[{"text":"const EXT4_FT_BLKDEV: u8 = 4;","highlight_start":7,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_BLKDEV` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:20:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m20\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_BLKDEV: u8 = 4;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_FIFO` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":665,"byte_end":677,"line_start":21,"line_end":21,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"const EXT4_FT_FIFO: u8 = 5;","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_FIFO` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:21:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m21\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_FIFO: u8 = 5;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_SOCK` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":693,"byte_end":705,"line_start":22,"line_end":22,"column_start":7,"column_end":19,"is_primary":true,"text":[{"text":"const EXT4_FT_SOCK: u8 = 6;","highlight_start":7,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_SOCK` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:22:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_SOCK: u8 = 6;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"constant `EXT4_FT_SYMLINK` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":721,"byte_end":736,"line_start":23,"line_end":23,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"const EXT4_FT_SYMLINK: u8 = 7;","highlight_start":7,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: constant `EXT4_FT_SYMLINK` is never used\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:23:7\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m23\u001b[0m \u001b[1m\u001b[96m|\u001b[0m const EXT4_FT_SYMLINK: u8 = 7;\n   \u001b[1m\u001b[96m|\u001b[0m       \u001b[1m\u001b[93m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `name_len` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":1051,"byte_end":1059,"line_start":34,"line_end":34,"column_start":8,"column_end":16,"is_primary":false,"text":[{"text":"struct DirEntry {","highlight_start":8,"highlight_end":16}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\vfs\\ext4\\dir.rs","byte_start":1220,"byte_end":1228,"line_start":40,"line_end":40,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    name_len: u8,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`DirEntry` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: field `name_len` is never read\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\dir.rs:40:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m34\u001b[0m \u001b[1m\u001b[96m|\u001b[0m struct DirEntry {\n   \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[96m--------\u001b[0m \u001b[1m\u001b[96mfield in this struct\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m40\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     name_len: u8,\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `DirEntry` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n\n"}
{"$message_type":"diagnostic","message":"associated functions `identify`, `read_sector_count`, `wait_not_busy`, `wait_400ns`, and `tiny_delay` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":1491,"byte_end":1504,"line_start":54,"line_end":54,"column_start":1,"column_end":14,"is_primary":false,"text":[{"text":"impl AtaDrive {","highlight_start":1,"highlight_end":14}],"label":"associated functions in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":6292,"byte_end":6300,"line_start":190,"line_end":190,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"    fn identify(bus: u16, drive: u8) -> bool {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":7854,"byte_end":7871,"line_start":246,"line_end":246,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    fn read_sector_count(bus: u16, drive: u8) -> u64 {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":12248,"byte_end":12261,"line_start":376,"line_end":376,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn wait_not_busy(bus: u16) -> bool {","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":12627,"byte_end":12637,"line_start":388,"line_end":388,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn wait_400ns(bus: u16) {","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":12782,"byte_end":12792,"line_start":395,"line_end":395,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn tiny_delay() {","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: associated functions `identify`, `read_sector_count`, `wait_not_busy`, `wait_400ns`, and `tiny_delay` are never used\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\ata.rs:190:8\n    \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m54\u001b[0m \u001b[1m\u001b[96m|\u001b[0m impl AtaDrive {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[96m-------------\u001b[0m \u001b[1m\u001b[96massociated functions in this implementation\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m190\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     fn identify(bus: u16, drive: u8) -> bool {\n    \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[93m^^^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m246\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     fn read_sector_count(bus: u16, drive: u8) -> u64 {\n    \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m376\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     fn wait_not_busy(bus: u16) -> bool {\n    \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[93m^^^^^^^^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m388\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     fn wait_400ns(bus: u16) {\n    \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[93m^^^^^^^^^^\u001b[0m\n\u001b[1m\u001b[96m...\u001b[0m\n\u001b[1m\u001b[96m395\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     fn tiny_delay() {\n    \u001b[1m\u001b[96m|\u001b[0m        \u001b[1m\u001b[93m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\lib.rs","byte_start":1345,"byte_end":1383,"line_start":44,"line_end":44,"column_start":1,"column_end":39,"is_primary":true,"text":[{"text":"pub unsafe fn allocator_force_unlock() {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::missing_safety_doc)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\lib.rs:44:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m44\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn allocator_force_unlock() {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::missing_safety_doc)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `EndTag`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\boot\\multiboot2.rs","byte_start":2028,"byte_end":2199,"line_start":80,"line_end":86,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            tag_type: TagType::End as u16,","highlight_start":1,"highlight_end":43},{"text":"            flags: 0,","highlight_start":1,"highlight_end":22},{"text":"            size: 8, // Size of this tag","highlight_start":1,"highlight_end":41},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::new_without_default)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\boot\\multiboot2.rs","byte_start":2009,"byte_end":2009,"line_start":79,"line_end":79,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl EndTag {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for EndTag {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `EndTag`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\boot\\multiboot2.rs:80:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m80\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m81\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m82\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             tag_type: TagType::End as u16,\n\u001b[1m\u001b[96m83\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             flags: 0,\n\u001b[1m\u001b[96m...\u001b[0m  \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m86\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::new_without_default)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m79\u001b[0m \u001b[92m+ impl Default for EndTag {\u001b[0m\n\u001b[1m\u001b[96m80\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m81\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m82\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m83\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `ConsoleTag`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\boot\\multiboot2.rs","byte_start":2888,"byte_end":3177,"line_start":119,"line_end":126,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            tag_type: 4,  // Console flags tag type","highlight_start":1,"highlight_end":52},{"text":"            flags: 0,     // Optional request","highlight_start":1,"highlight_end":46},{"text":"            size: 12,     // Size of this tag","highlight_start":1,"highlight_end":46},{"text":"            console_flags: 3,  // EGA_TEXT_SUPPORTED (bit 0) + REQUIRE (bit 1)","highlight_start":1,"highlight_end":79},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\boot\\multiboot2.rs","byte_start":2865,"byte_end":2865,"line_start":118,"line_end":118,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl ConsoleTag {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for ConsoleTag {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `ConsoleTag`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\boot\\multiboot2.rs:119:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m119\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m120\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m121\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             tag_type: 4,  // Console flags tag type\n\u001b[1m\u001b[96m122\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             flags: 0,     // Optional request\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m126\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m118\u001b[0m \u001b[92m+ impl Default for ConsoleTag {\u001b[0m\n\u001b[1m\u001b[96m119\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m120\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m121\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m122\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\context.rs","byte_start":9706,"byte_end":9785,"line_start":309,"line_end":309,"column_start":1,"column_end":80,"is_primary":true,"text":[{"text":"pub unsafe fn init_thread_stack(stack_top: u64, _entry_point: fn() -> !) -> u64 {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\context.rs:309:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m309\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn init_thread_stack(stack_top: u64, _entry_point: fn() -> !) -> u64 {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`","code":{"code":"clippy::incompatible_msrv","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\scheduler.rs","byte_start":2530,"byte_end":2559,"line_start":72,"line_end":72,"column_start":74,"column_end":103,"is_primary":true,"text":[{"text":"        let mut boxed: alloc::boxed::Box<core::mem::MaybeUninit<Self>> = alloc::boxed::Box::new_uninit();","highlight_start":74,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::incompatible_msrv)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\scheduler.rs:72:74\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m72\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let mut boxed: alloc::boxed::Box<core::mem::MaybeUninit<Self>> = alloc::boxed::Box::new_uninit();\n   \u001b[1m\u001b[96m|\u001b[0m                                                                          \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::incompatible_msrv)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`","code":{"code":"clippy::incompatible_msrv","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\scheduler.rs","byte_start":3947,"byte_end":3960,"line_start":102,"line_end":102,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"            boxed.assume_init()","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\scheduler.rs:102:19\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m102\u001b[0m \u001b[1m\u001b[96m|\u001b[0m             boxed.assume_init()\n    \u001b[1m\u001b[96m|\u001b[0m                   \u001b[1m\u001b[93m^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n\n"}
{"$message_type":"diagnostic","message":"casting function pointer `entry_point` to `u64`","code":{"code":"clippy::fn_to_numeric_cast","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\thread.rs","byte_start":2529,"byte_end":2547,"line_start":86,"line_end":86,"column_start":42,"column_end":60,"is_primary":true,"text":[{"text":"        let context = ThreadContext::new(entry_point as u64, stack_top);","highlight_start":42,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::fn_to_numeric_cast)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\thread.rs","byte_start":2529,"byte_end":2547,"line_start":86,"line_end":86,"column_start":42,"column_end":60,"is_primary":true,"text":[{"text":"        let context = ThreadContext::new(entry_point as u64, stack_top);","highlight_start":42,"highlight_end":60}],"label":null,"suggested_replacement":"entry_point as usize","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: casting function pointer `entry_point` to `u64`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\thread.rs:86:42\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m86\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let context = ThreadContext::new(entry_point as u64, stack_top);\n   \u001b[1m\u001b[96m|\u001b[0m                                          \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `entry_point as usize`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::fn_to_numeric_cast)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"casting function pointer `entry_point` to `u64`","code":{"code":"clippy::fn_to_numeric_cast","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\thread.rs","byte_start":2862,"byte_end":2880,"line_start":93,"line_end":93,"column_start":30,"column_end":48,"is_primary":true,"text":[{"text":"                       id.0, entry_point as u64, stack_top, context.rsp);","highlight_start":30,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\thread.rs","byte_start":2862,"byte_end":2880,"line_start":93,"line_end":93,"column_start":30,"column_end":48,"is_primary":true,"text":[{"text":"                       id.0, entry_point as u64, stack_top, context.rsp);","highlight_start":30,"highlight_end":48}],"label":null,"suggested_replacement":"entry_point as usize","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: casting function pointer `entry_point` to `u64`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\thread.rs:93:30\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m93\u001b[0m \u001b[1m\u001b[96m|\u001b[0m                        id.0, entry_point as u64, stack_top, context.rsp);\n   \u001b[1m\u001b[96m|\u001b[0m                              \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `entry_point as usize`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n\n"}
{"$message_type":"diagnostic","message":"casting raw pointers to the same type and constness is unnecessary (`*mut loom_of_fate::context::ThreadContext` -> `*mut loom_of_fate::context::ThreadContext`)","code":{"code":"clippy::unnecessary_cast","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\mod.rs","byte_start":8656,"byte_end":8699,"line_start":239,"line_end":239,"column_start":41,"column_end":84,"is_primary":true,"text":[{"text":"        context::save_preempted_context(from_ctx_ptr as *mut context::ThreadContext, interrupt_frame_ptr);","highlight_start":41,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unnecessary_cast)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\mod.rs","byte_start":8656,"byte_end":8699,"line_start":239,"line_end":239,"column_start":41,"column_end":84,"is_primary":true,"text":[{"text":"        context::save_preempted_context(from_ctx_ptr as *mut context::ThreadContext, interrupt_frame_ptr);","highlight_start":41,"highlight_end":84}],"label":null,"suggested_replacement":"from_ctx_ptr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: casting raw pointers to the same type and constness is unnecessary (`*mut loom_of_fate::context::ThreadContext` -> `*mut loom_of_fate::context::ThreadContext`)\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\mod.rs:239:41\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m239\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         context::save_preempted_context(from_ctx_ptr as *mut context::ThreadContext, interrupt_frame_ptr);\n    \u001b[1m\u001b[96m|\u001b[0m                                         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `from_ctx_ptr`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::unnecessary_cast)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\loom_of_fate\\mod.rs","byte_start":12846,"byte_end":12883,"line_start":372,"line_end":372,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"pub unsafe fn prepare_great_handoff() {","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\loom_of_fate\\mod.rs:372:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m372\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn prepare_great_handoff() {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `BuddyAllocator`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\allocator.rs","byte_start":699,"byte_end":810,"line_start":22,"line_end":26,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            inner: LockedBuddyAllocator::new(),","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\allocator.rs","byte_start":672,"byte_end":672,"line_start":21,"line_end":21,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl BuddyAllocator {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for BuddyAllocator {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `BuddyAllocator`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\allocator.rs:22:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m23\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m24\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             inner: LockedBuddyAllocator::new(),\n\u001b[1m\u001b[96m25\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }\n\u001b[1m\u001b[96m26\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m21\u001b[0m \u001b[92m+ impl Default for BuddyAllocator {\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m23\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m24\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m25\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `BuddyAllocator`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":2990,"byte_end":3152,"line_start":88,"line_end":94,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            free_lists: [None; NUM_ORDERS],","highlight_start":1,"highlight_end":44},{"text":"            heap_start: 0,","highlight_start":1,"highlight_end":27},{"text":"            heap_size: 0,","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":2911,"byte_end":2911,"line_start":86,"line_end":86,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl BuddyAllocator {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for BuddyAllocator {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `BuddyAllocator`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\buddy.rs:88:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m88\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m89\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m90\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             free_lists: [None; NUM_ORDERS],\n\u001b[1m\u001b[96m91\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             heap_start: 0,\n\u001b[1m\u001b[96m...\u001b[0m  \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m94\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m86\u001b[0m \u001b[92m+ impl Default for BuddyAllocator {\u001b[0m\n\u001b[1m\u001b[96m87\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m88\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m89\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m90\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"manual implementation of `Iterator::find`","code":{"code":"clippy::manual_find","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":9305,"byte_end":9469,"line_start":258,"line_end":263,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        for order in min_order..=MAX_ORDER {","highlight_start":9,"highlight_end":45},{"text":"            if self.free_lists[order].is_some() {","highlight_start":1,"highlight_end":50},{"text":"                return Some(order);","highlight_start":1,"highlight_end":36},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        None","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_find","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::manual_find)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with an iterator","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":9305,"byte_end":9469,"line_start":258,"line_end":263,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"        for order in min_order..=MAX_ORDER {","highlight_start":9,"highlight_end":45},{"text":"            if self.free_lists[order].is_some() {","highlight_start":1,"highlight_end":50},{"text":"                return Some(order);","highlight_start":1,"highlight_end":36},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        None","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"(min_order..=MAX_ORDER).find(|&order| self.free_lists[order].is_some())","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manual implementation of `Iterator::find`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\buddy.rs:258:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m258\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m         for order in min_order..=MAX_ORDER {\n\u001b[1m\u001b[96m259\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             if self.free_lists[order].is_some() {\n\u001b[1m\u001b[96m260\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                 return Some(order);\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m263\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         None\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|____________^\u001b[0m \u001b[1m\u001b[93mhelp: replace with an iterator: `(min_order..=MAX_ORDER).find(|&order| self.free_lists[order].is_some())`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_find\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::manual_find)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":13927,"byte_end":13971,"line_start":386,"line_end":386,"column_start":22,"column_end":66,"is_primary":true,"text":[{"text":"        let blocks = (size + MIN_BLOCK_SIZE - 1) / MIN_BLOCK_SIZE;","highlight_start":22,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::manual_div_ceil)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":13927,"byte_end":13971,"line_start":386,"line_end":386,"column_start":22,"column_end":66,"is_primary":true,"text":[{"text":"        let blocks = (size + MIN_BLOCK_SIZE - 1) / MIN_BLOCK_SIZE;","highlight_start":22,"highlight_end":66}],"label":null,"suggested_replacement":"size.div_ceil(MIN_BLOCK_SIZE)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\buddy.rs:386:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m386\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let blocks = (size + MIN_BLOCK_SIZE - 1) / MIN_BLOCK_SIZE;\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `size.div_ceil(MIN_BLOCK_SIZE)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::manual_div_ceil)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `LockedBuddyAllocator`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":15697,"byte_end":15826,"line_start":450,"line_end":454,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            inner: InterruptSafeLock::new(BuddyAllocator::new()),","highlight_start":1,"highlight_end":66},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\buddy.rs","byte_start":15664,"byte_end":15664,"line_start":449,"line_end":449,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl LockedBuddyAllocator {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for LockedBuddyAllocator {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `LockedBuddyAllocator`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\buddy.rs:450:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m450\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m451\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m452\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             inner: InterruptSafeLock::new(BuddyAllocator::new()),\n\u001b[1m\u001b[96m453\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }\n\u001b[1m\u001b[96m454\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m449\u001b[0m \u001b[92m+ impl Default for LockedBuddyAllocator {\u001b[0m\n\u001b[1m\u001b[96m450\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m451\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m452\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m453\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the loop variable `i` is used to index `working`","code":{"code":"clippy::needless_range_loop","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\entropy.rs","byte_start":3986,"byte_end":3991,"line_start":132,"line_end":132,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"        for i in 0..16 {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_range_loop)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using an iterator and enumerate()","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\entropy.rs","byte_start":3981,"byte_end":3982,"line_start":132,"line_end":132,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for i in 0..16 {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"(i, <item>)","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\entropy.rs","byte_start":3986,"byte_end":3991,"line_start":132,"line_end":132,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"        for i in 0..16 {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":"working.iter_mut().enumerate()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the loop variable `i` is used to index `working`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\entropy.rs:132:18\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m132\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         for i in 0..16 {\n    \u001b[1m\u001b[96m|\u001b[0m                  \u001b[1m\u001b[93m^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::needless_range_loop)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: consider using an iterator and enumerate()\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m132\u001b[0m \u001b[91m- \u001b[0m        for \u001b[91mi\u001b[0m in \u001b[91m0..16\u001b[0m {\n\u001b[1m\u001b[96m132\u001b[0m \u001b[92m+ \u001b[0m        for \u001b[92m(i, <item>)\u001b[0m in \u001b[92mworking.iter_mut().enumerate()\u001b[0m {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"returning the result of a `let` binding from a block","code":{"code":"clippy::let_and_return","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\aslr.rs","byte_start":4359,"byte_end":4422,"line_start":112,"line_end":112,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        let offset = HardwareRng::range(0, MAX_OFFSET / ALIGN) * ALIGN;","highlight_start":9,"highlight_end":72}],"label":"unnecessary `let` binding","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\mana_pool\\aslr.rs","byte_start":4431,"byte_end":4437,"line_start":113,"line_end":113,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        offset","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::let_and_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"return the expression directly","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\aslr.rs","byte_start":4359,"byte_end":4422,"line_start":112,"line_end":112,"column_start":9,"column_end":72,"is_primary":true,"text":[{"text":"        let offset = HardwareRng::range(0, MAX_OFFSET / ALIGN) * ALIGN;","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\aslr.rs","byte_start":4431,"byte_end":4437,"line_start":113,"line_end":113,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        offset","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"HardwareRng::range(0, MAX_OFFSET / ALIGN) * ALIGN","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: returning the result of a `let` binding from a block\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\aslr.rs:113:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m112\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let offset = HardwareRng::range(0, MAX_OFFSET / ALIGN) * ALIGN;\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[96m---------------------------------------------------------------\u001b[0m \u001b[1m\u001b[96munnecessary `let` binding\u001b[0m\n\u001b[1m\u001b[96m113\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         offset\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::let_and_return)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: return the expression directly\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m112\u001b[0m \u001b[92m~ \u001b[0m        \n\u001b[1m\u001b[96m113\u001b[0m \u001b[92m~ \u001b[0m        \u001b[92mHardwareRng::range(0, MAX_OFFSET / ALIGN) * ALIGN\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this is an outer doc comment and does not apply to the parent module or crate","code":{"code":"clippy::suspicious_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":0,"byte_end":595,"line_start":1,"line_end":11,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"///! Capability Sealing - Cryptographic protection against forgery","highlight_start":1,"highlight_end":67},{"text":"///!","highlight_start":1,"highlight_end":5},{"text":"///! This module implements unforgeable capability seals using HMAC-SHA256.","highlight_start":1,"highlight_end":76},{"text":"///! Each capability is sealed with a kernel-only secret key, preventing","highlight_start":1,"highlight_end":73},{"text":"///! user space from forging or tampering with capabilities.","highlight_start":1,"highlight_end":61},{"text":"///!","highlight_start":1,"highlight_end":5},{"text":"///! # Security Properties","highlight_start":1,"highlight_end":27},{"text":"///! - **Unforgeable**: Can't create valid seal without kernel secret key","highlight_start":1,"highlight_end":74},{"text":"///! - **Tamper-Proof**: Modifying capability data invalidates seal","highlight_start":1,"highlight_end":68},{"text":"///! - **Constant-Time**: Verification uses constant-time comparison","highlight_start":1,"highlight_end":69},{"text":"///! - **Kernel-Only**: Secret key never leaves kernel space","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_doc_comments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::suspicious_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use an inner doc comment to document the parent module or crate","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":0,"byte_end":66,"line_start":1,"line_end":1,"column_start":1,"column_end":67,"is_primary":true,"text":[{"text":"///! Capability Sealing - Cryptographic protection against forgery","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":"//! Capability Sealing - Cryptographic protection against forgery","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":68,"byte_end":72,"line_start":2,"line_end":2,"column_start":1,"column_end":5,"is_primary":true,"text":[{"text":"///!","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"//!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":74,"byte_end":149,"line_start":3,"line_end":3,"column_start":1,"column_end":76,"is_primary":true,"text":[{"text":"///! This module implements unforgeable capability seals using HMAC-SHA256.","highlight_start":1,"highlight_end":76}],"label":null,"suggested_replacement":"//! This module implements unforgeable capability seals using HMAC-SHA256.","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":151,"byte_end":223,"line_start":4,"line_end":4,"column_start":1,"column_end":73,"is_primary":true,"text":[{"text":"///! Each capability is sealed with a kernel-only secret key, preventing","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":"//! Each capability is sealed with a kernel-only secret key, preventing","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":225,"byte_end":285,"line_start":5,"line_end":5,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"///! user space from forging or tampering with capabilities.","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":"//! user space from forging or tampering with capabilities.","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":287,"byte_end":291,"line_start":6,"line_end":6,"column_start":1,"column_end":5,"is_primary":true,"text":[{"text":"///!","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"//!","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":293,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"///! # Security Properties","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"//! # Security Properties","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":321,"byte_end":394,"line_start":8,"line_end":8,"column_start":1,"column_end":74,"is_primary":true,"text":[{"text":"///! - **Unforgeable**: Can't create valid seal without kernel secret key","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":"//! - **Unforgeable**: Can't create valid seal without kernel secret key","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":396,"byte_end":463,"line_start":9,"line_end":9,"column_start":1,"column_end":68,"is_primary":true,"text":[{"text":"///! - **Tamper-Proof**: Modifying capability data invalidates seal","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":"//! - **Tamper-Proof**: Modifying capability data invalidates seal","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":465,"byte_end":533,"line_start":10,"line_end":10,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"///! - **Constant-Time**: Verification uses constant-time comparison","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":"//! - **Constant-Time**: Verification uses constant-time comparison","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":535,"byte_end":595,"line_start":11,"line_end":11,"column_start":1,"column_end":61,"is_primary":true,"text":[{"text":"///! - **Kernel-Only**: Secret key never leaves kernel space","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":"//! - **Kernel-Only**: Secret key never leaves kernel space","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: this is an outer doc comment and does not apply to the parent module or crate\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\sealing.rs:1:1\n   \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m1\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m ///! Capability Sealing - Cryptographic protection against forgery\n \u001b[1m\u001b[96m2\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ///!\n \u001b[1m\u001b[96m3\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ///! This module implements unforgeable capability seals using HMAC-SHA256.\n \u001b[1m\u001b[96m4\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ///! Each capability is sealed with a kernel-only secret key, preventing\n\u001b[1m\u001b[96m...\u001b[0m  \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m10\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ///! - **Constant-Time**: Verification uses constant-time comparison\n\u001b[1m\u001b[96m11\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ///! - **Kernel-Only**: Secret key never leaves kernel space\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|____________________________________________________________^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_doc_comments\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::suspicious_doc_comments)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: use an inner doc comment to document the parent module or crate\n   \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m1\u001b[0m \u001b[92m+ //! Capability Sealing - Cryptographic protection against forgery\u001b[0m\n \u001b[1m\u001b[96m2\u001b[0m \u001b[92m+ //!\u001b[0m\n \u001b[1m\u001b[96m3\u001b[0m \u001b[92m+ //! This module implements unforgeable capability seals using HMAC-SHA256.\u001b[0m\n \u001b[1m\u001b[96m4\u001b[0m \u001b[92m+ //! Each capability is sealed with a kernel-only secret key, preventing\u001b[0m\n \u001b[1m\u001b[96m5\u001b[0m \u001b[92m+ //! user space from forging or tampering with capabilities.\u001b[0m\n \u001b[1m\u001b[96m6\u001b[0m \u001b[92m+ //!\u001b[0m\n \u001b[1m\u001b[96m7\u001b[0m \u001b[92m+ //! # Security Properties\u001b[0m\n \u001b[1m\u001b[96m8\u001b[0m \u001b[92m+ //! - **Unforgeable**: Can't create valid seal without kernel secret key\u001b[0m\n \u001b[1m\u001b[96m9\u001b[0m \u001b[92m+ //! - **Tamper-Proof**: Modifying capability data invalidates seal\u001b[0m\n\u001b[1m\u001b[96m10\u001b[0m \u001b[92m+ //! - **Constant-Time**: Verification uses constant-time comparison\u001b[0m\n\u001b[1m\u001b[96m11\u001b[0m \u001b[92m+ //! - **Kernel-Only**: Secret key never leaves kernel space\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `CapabilitySealer`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":1240,"byte_end":1347,"line_start":32,"line_end":35,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        let seal_key = Self::generate_seal_key();","highlight_start":1,"highlight_end":50},{"text":"        Self { seal_key }","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":842,"byte_end":842,"line_start":22,"line_end":22,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl CapabilitySealer {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for CapabilitySealer {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `CapabilitySealer`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\sealing.rs:32:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m32\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub fn new() -> Self {\n\u001b[1m\u001b[96m33\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         let seal_key = Self::generate_seal_key();\n\u001b[1m\u001b[96m34\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self { seal_key }\n\u001b[1m\u001b[96m35\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[92m+ impl Default for CapabilitySealer {\u001b[0m\n\u001b[1m\u001b[96m23\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m24\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m25\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m26\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the borrowed expression implements the required traits","code":{"code":"clippy::needless_borrows_for_generic_args","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":2298,"byte_end":2312,"line_start":65,"line_end":65,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"        hmac_sha256::HMAC::mac(data, &self.seal_key)","highlight_start":38,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_borrows_for_generic_args)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\sealing.rs","byte_start":2298,"byte_end":2312,"line_start":65,"line_end":65,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"        hmac_sha256::HMAC::mac(data, &self.seal_key)","highlight_start":38,"highlight_end":52}],"label":null,"suggested_replacement":"self.seal_key","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the borrowed expression implements the required traits\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\sealing.rs:65:38\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m65\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         hmac_sha256::HMAC::mac(data, &self.seal_key)\n   \u001b[1m\u001b[96m|\u001b[0m                                      \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: change this to: `self.seal_key`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::needless_borrows_for_generic_args)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\page_tables.rs","byte_start":5174,"byte_end":5260,"line_start":166,"line_end":166,"column_start":1,"column_end":87,"is_primary":true,"text":[{"text":"pub unsafe fn walk_page_tables(virt_addr: u64) -> Option<(PageTableEntry, u64, usize)> {","highlight_start":1,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\page_tables.rs:166:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m166\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn walk_page_tables(virt_addr: u64) -> Option<(PageTableEntry, u64, usize)> {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\page_tables.rs","byte_start":10678,"byte_end":10726,"line_start":340,"line_end":340,"column_start":1,"column_end":49,"is_primary":true,"text":[{"text":"pub unsafe fn debug_page_mapping(virt_addr: u64) {","highlight_start":1,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\page_tables.rs:340:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m340\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn debug_page_mapping(virt_addr: u64) {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\rune_of_permanence.rs","byte_start":2110,"byte_end":2133,"line_start":65,"line_end":65,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    (size + 0xFFF) / 0x1000","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\rune_of_permanence.rs","byte_start":2110,"byte_end":2133,"line_start":65,"line_end":65,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    (size + 0xFFF) / 0x1000","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"size.div_ceil(0x1000)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\rune_of_permanence.rs:65:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m65\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     (size + 0xFFF) / 0x1000\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `size.div_ceil(0x1000)`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `Concordance`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":6224,"byte_end":6427,"line_start":239,"line_end":246,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            fates: BTreeMap::new(),","highlight_start":1,"highlight_end":36},{"text":"            subjects: BTreeMap::new(),","highlight_start":1,"highlight_end":39},{"text":"            sealed: false,","highlight_start":1,"highlight_end":27},{"text":"            default_fate: String::new(),","highlight_start":1,"highlight_end":41},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":6160,"byte_end":6160,"line_start":237,"line_end":237,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl Concordance {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for Concordance {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `Concordance`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:239:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m239\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub fn new() -> Self {\n\u001b[1m\u001b[96m240\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self {\n\u001b[1m\u001b[96m241\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             fates: BTreeMap::new(),\n\u001b[1m\u001b[96m242\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             subjects: BTreeMap::new(),\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m246\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m237\u001b[0m \u001b[92m+ impl Default for Concordance {\u001b[0m\n\u001b[1m\u001b[96m238\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m239\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m240\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m241\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`","code":{"code":"clippy::incompatible_msrv","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\mod.rs","byte_start":2928,"byte_end":2957,"line_start":77,"line_end":77,"column_start":74,"column_end":103,"is_primary":true,"text":[{"text":"        let mut boxed: alloc::boxed::Box<core::mem::MaybeUninit<Self>> = alloc::boxed::Box::new_uninit();","highlight_start":74,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\mod.rs:77:74\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m77\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let mut boxed: alloc::boxed::Box<core::mem::MaybeUninit<Self>> = alloc::boxed::Box::new_uninit();\n   \u001b[1m\u001b[96m|\u001b[0m                                                                          \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n\n"}
{"$message_type":"diagnostic","message":"current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`","code":{"code":"clippy::incompatible_msrv","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\mod.rs","byte_start":3492,"byte_end":3505,"line_start":90,"line_end":90,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"            boxed.assume_init()","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: current MSRV (Minimum Supported Rust Version) is `1.75.0` but this item is stable since `1.82.0`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\mod.rs:90:19\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m90\u001b[0m \u001b[1m\u001b[96m|\u001b[0m             boxed.assume_init()\n   \u001b[1m\u001b[96m|\u001b[0m                   \u001b[1m\u001b[93m^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `TaskStateSegment`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":4321,"byte_end":4622,"line_start":138,"line_end":148,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        TaskStateSegment {","highlight_start":1,"highlight_end":27},{"text":"            reserved_1: 0,","highlight_start":1,"highlight_end":27},{"text":"            rsp: [0; 3],","highlight_start":1,"highlight_end":25},{"text":"            reserved_2: 0,","highlight_start":1,"highlight_end":27},{"text":"            ist: [0; 7],","highlight_start":1,"highlight_end":25},{"text":"            reserved_3: 0,","highlight_start":1,"highlight_end":27},{"text":"            reserved_4: 0,","highlight_start":1,"highlight_end":27},{"text":"            iomap_base: size_of::<TaskStateSegment>() as u16,","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":4246,"byte_end":4246,"line_start":136,"line_end":136,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl TaskStateSegment {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for TaskStateSegment {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `TaskStateSegment`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:138:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m138\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m139\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         TaskStateSegment {\n\u001b[1m\u001b[96m140\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             reserved_1: 0,\n\u001b[1m\u001b[96m141\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             rsp: [0; 3],\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m148\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m136\u001b[0m \u001b[92m+ impl Default for TaskStateSegment {\u001b[0m\n\u001b[1m\u001b[96m137\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m138\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m139\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m140\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `GlobalDescriptorTable`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":5436,"byte_end":5612,"line_start":179,"line_end":184,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        GlobalDescriptorTable {","highlight_start":1,"highlight_end":32},{"text":"            entries: [GdtEntry::null(); 8],","highlight_start":1,"highlight_end":44},{"text":"            len: 1,  // Start with null descriptor","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":5354,"byte_end":5354,"line_start":177,"line_end":177,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl GlobalDescriptorTable {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for GlobalDescriptorTable {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `GlobalDescriptorTable`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:179:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m179\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m180\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         GlobalDescriptorTable {\n\u001b[1m\u001b[96m181\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             entries: [GdtEntry::null(); 8],\n\u001b[1m\u001b[96m182\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             len: 1,  // Start with null descriptor\n\u001b[1m\u001b[96m183\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }\n\u001b[1m\u001b[96m184\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m177\u001b[0m \u001b[92m+ impl Default for GlobalDescriptorTable {\u001b[0m\n\u001b[1m\u001b[96m178\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m179\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m180\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m181\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `Keyboard`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\keyboard.rs","byte_start":357,"byte_end":460,"line_start":15,"line_end":19,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        Keyboard {","highlight_start":1,"highlight_end":19},{"text":"            data_port: Port::new(0x60),","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\keyboard.rs","byte_start":337,"byte_end":337,"line_start":14,"line_end":14,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl Keyboard {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for Keyboard {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `Keyboard`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\keyboard.rs:15:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m15\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m16\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Keyboard {\n\u001b[1m\u001b[96m17\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             data_port: Port::new(0x60),\n\u001b[1m\u001b[96m18\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }\n\u001b[1m\u001b[96m19\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m14\u001b[0m \u001b[92m+ impl Default for Keyboard {\u001b[0m\n\u001b[1m\u001b[96m15\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m16\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m17\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m18\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":12117,"byte_end":12246,"line_start":381,"line_end":384,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"pub unsafe fn sanctified_copy_slice_from_mortal<T: Copy>(","highlight_start":1,"highlight_end":58},{"text":"    mortal_addr: u64,","highlight_start":1,"highlight_end":22},{"text":"    dest: &mut [T],","highlight_start":1,"highlight_end":20},{"text":") -> Result<(), WardError> {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_sacred_boundaries.rs:381:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m381\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m pub unsafe fn sanctified_copy_slice_from_mortal<T: Copy>(\n\u001b[1m\u001b[96m382\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     mortal_addr: u64,\n\u001b[1m\u001b[96m383\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     dest: &mut [T],\n\u001b[1m\u001b[96m384\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ) -> Result<(), WardError> {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|__________________________^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"manual slice size calculation","code":{"code":"clippy::manual_slice_size_calculation","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":12265,"byte_end":12292,"line_start":385,"line_end":385,"column_start":16,"column_end":43,"is_primary":true,"text":[{"text":"    let size = dest.len() * size_of::<T>();","highlight_start":16,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::manual_slice_size_calculation)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":12265,"byte_end":12292,"line_start":385,"line_end":385,"column_start":16,"column_end":43,"is_primary":true,"text":[{"text":"    let size = dest.len() * size_of::<T>();","highlight_start":16,"highlight_end":43}],"label":null,"suggested_replacement":"core::mem::size_of_val(dest)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manual slice size calculation\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_sacred_boundaries.rs:385:16\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m385\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     let size = dest.len() * size_of::<T>();\n    \u001b[1m\u001b[96m|\u001b[0m                \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `core::mem::size_of_val(dest)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::manual_slice_size_calculation)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":12867,"byte_end":12989,"line_start":413,"line_end":416,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"pub unsafe fn sanctified_copy_slice_to_mortal<T: Copy>(","highlight_start":1,"highlight_end":56},{"text":"    src: &[T],","highlight_start":1,"highlight_end":15},{"text":"    mortal_addr: u64,","highlight_start":1,"highlight_end":22},{"text":") -> Result<(), WardError> {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_sacred_boundaries.rs:413:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m413\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m pub unsafe fn sanctified_copy_slice_to_mortal<T: Copy>(\n\u001b[1m\u001b[96m414\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     src: &[T],\n\u001b[1m\u001b[96m415\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     mortal_addr: u64,\n\u001b[1m\u001b[96m416\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m ) -> Result<(), WardError> {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|__________________________^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"manual slice size calculation","code":{"code":"clippy::manual_slice_size_calculation","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":13008,"byte_end":13034,"line_start":417,"line_end":417,"column_start":16,"column_end":42,"is_primary":true,"text":[{"text":"    let size = src.len() * size_of::<T>();","highlight_start":16,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_sacred_boundaries.rs","byte_start":13008,"byte_end":13034,"line_start":417,"line_end":417,"column_start":16,"column_end":42,"is_primary":true,"text":[{"text":"    let size = src.len() * size_of::<T>();","highlight_start":16,"highlight_end":42}],"label":null,"suggested_replacement":"core::mem::size_of_val(src)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manual slice size calculation\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_sacred_boundaries.rs:417:16\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m417\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     let size = src.len() * size_of::<T>();\n    \u001b[1m\u001b[96m|\u001b[0m                \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `core::mem::size_of_val(src)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n\n"}
{"$message_type":"diagnostic","message":"the following explicit lifetimes could be elided: 'a","code":{"code":"clippy::needless_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6569,"byte_end":6571,"line_start":216,"line_end":216,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6577,"byte_end":6579,"line_start":216,"line_end":216,"column_start":30,"column_end":32,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":30,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6612,"byte_end":6614,"line_start":216,"line_end":216,"column_start":65,"column_end":67,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":65,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"elide the lifetimes","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6568,"byte_end":6572,"line_start":216,"line_end":216,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6577,"byte_end":6580,"line_start":216,"line_end":216,"column_start":30,"column_end":33,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":30,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":6612,"byte_end":6615,"line_start":216,"line_end":216,"column_start":65,"column_end":68,"is_primary":true,"text":[{"text":"pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":65,"highlight_end":68}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the following explicit lifetimes could be elided: 'a\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_anonymity.rs:216:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m216\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub fn redact_string<'a>(s: &'a str, level: PrivilegeLevel) -> &'a str {\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^\u001b[0m      \u001b[1m\u001b[93m^^\u001b[0m                                 \u001b[1m\u001b[93m^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::needless_lifetimes)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: elide the lifetimes\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m216\u001b[0m \u001b[91m- \u001b[0mpub fn redact_string\u001b[91m<'a>\u001b[0m(s: &\u001b[91m'a \u001b[0mstr, level: PrivilegeLevel) -> &\u001b[91m'a \u001b[0mstr {\n\u001b[1m\u001b[96m216\u001b[0m \u001b[92m+ \u001b[0mpub fn redact_string(s: &str, level: PrivilegeLevel) -> &str {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the following explicit lifetimes could be elided: 'a","code":{"code":"clippy::needless_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8132,"byte_end":8134,"line_start":270,"line_end":270,"column_start":29,"column_end":31,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":29,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8143,"byte_end":8145,"line_start":270,"line_end":270,"column_start":40,"column_end":42,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":40,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8178,"byte_end":8180,"line_start":270,"line_end":270,"column_start":75,"column_end":77,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":75,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"elide the lifetimes","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8131,"byte_end":8135,"line_start":270,"line_end":270,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":28,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8143,"byte_end":8146,"line_start":270,"line_end":270,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"heartwood\\src\\attunement\\ward_of_anonymity.rs","byte_start":8178,"byte_end":8181,"line_start":270,"line_end":270,"column_start":75,"column_end":78,"is_primary":true,"text":[{"text":"pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {","highlight_start":75,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the following explicit lifetimes could be elided: 'a\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_anonymity.rs:270:29\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m270\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub fn format_function_name<'a>(name: &'a str, level: PrivilegeLevel) -> &'a str {\n    \u001b[1m\u001b[96m|\u001b[0m                             \u001b[1m\u001b[93m^^\u001b[0m         \u001b[1m\u001b[93m^^\u001b[0m                                 \u001b[1m\u001b[93m^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n\u001b[1m\u001b[96mhelp\u001b[0m: elide the lifetimes\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m270\u001b[0m \u001b[91m- \u001b[0mpub fn format_function_name\u001b[91m<'a>\u001b[0m(name: &\u001b[91m'a \u001b[0mstr, level: PrivilegeLevel) -> &\u001b[91m'a \u001b[0mstr {\n\u001b[1m\u001b[96m270\u001b[0m \u001b[92m+ \u001b[0mpub fn format_function_name(name: &str, level: PrivilegeLevel) -> &str {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vga_buffer.rs","byte_start":8230,"byte_end":8258,"line_start":269,"line_end":269,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"pub unsafe fn force_unlock() {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vga_buffer.rs:269:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m269\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn force_unlock() {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vga_buffer.rs","byte_start":8614,"byte_end":8657,"line_start":279,"line_end":279,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub unsafe fn write_char_unlocked(ch: char) {","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vga_buffer.rs:279:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m279\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn write_char_unlocked(ch: char) {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\rtl.rs","byte_start":469,"byte_end":504,"line_start":18,"line_end":18,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn rtl_test() {","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\rtl.rs:18:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m18\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe extern \"C\" fn rtl_test() {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\rtl.rs","byte_start":639,"byte_end":722,"line_start":26,"line_end":26,"column_start":1,"column_end":84,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn memcpy(dest: *mut u8, src: *const u8, n: usize) -> *mut u8 {","highlight_start":1,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\rtl.rs:26:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m26\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe extern \"C\" fn memcpy(dest: *mut u8, src: *const u8, n: usize) -> *mut u8 {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\rtl.rs","byte_start":1073,"byte_end":1157,"line_start":42,"line_end":42,"column_start":1,"column_end":85,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn memmove(dest: *mut u8, src: *const u8, n: usize) -> *mut u8 {","highlight_start":1,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\rtl.rs:42:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m42\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe extern \"C\" fn memmove(dest: *mut u8, src: *const u8, n: usize) -> *mut u8 {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\rtl.rs","byte_start":1579,"byte_end":1651,"line_start":63,"line_end":63,"column_start":1,"column_end":73,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn memset(s: *mut u8, c: i32, n: usize) -> *mut u8 {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\rtl.rs:63:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m63\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe extern \"C\" fn memset(s: *mut u8, c: i32, n: usize) -> *mut u8 {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\rtl.rs","byte_start":1794,"byte_end":1872,"line_start":74,"line_end":74,"column_start":1,"column_end":79,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32 {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\rtl.rs:74:1\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m74\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe extern \"C\" fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32 {\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `CommandBuffer`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\eldarin.rs","byte_start":1425,"byte_end":1561,"line_start":44,"line_end":49,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        CommandBuffer {","highlight_start":1,"highlight_end":24},{"text":"            buffer: [0; BUFFER_SIZE],","highlight_start":1,"highlight_end":38},{"text":"            position: 0,","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\eldarin.rs","byte_start":1399,"byte_end":1399,"line_start":43,"line_end":43,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl CommandBuffer {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for CommandBuffer {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `CommandBuffer`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\eldarin.rs:44:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m44\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m45\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         CommandBuffer {\n\u001b[1m\u001b[96m46\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             buffer: [0; BUFFER_SIZE],\n\u001b[1m\u001b[96m47\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             position: 0,\n\u001b[1m\u001b[96m48\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }\n\u001b[1m\u001b[96m49\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m43\u001b[0m \u001b[92m+ impl Default for CommandBuffer {\u001b[0m\n\u001b[1m\u001b[96m44\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m45\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m46\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m47\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `CommandHistory`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\eldarin.rs","byte_start":2855,"byte_end":3133,"line_start":99,"line_end":108,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub const fn new() -> Self {","highlight_start":5,"highlight_end":33},{"text":"        CommandHistory {","highlight_start":1,"highlight_end":25},{"text":"            commands: [[0; BUFFER_SIZE]; HISTORY_SIZE],","highlight_start":1,"highlight_end":56},{"text":"            lengths: [0; HISTORY_SIZE],","highlight_start":1,"highlight_end":40},{"text":"            write_pos: 0,","highlight_start":1,"highlight_end":26},{"text":"            read_pos: 0,","highlight_start":1,"highlight_end":25},{"text":"            count: 0,","highlight_start":1,"highlight_end":22},{"text":"            navigating: false,","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\eldarin.rs","byte_start":2828,"byte_end":2828,"line_start":98,"line_end":98,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl CommandHistory {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for CommandHistory {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `CommandHistory`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\eldarin.rs:99:5\n    \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m99\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub const fn new() -> Self {\n\u001b[1m\u001b[96m100\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         CommandHistory {\n\u001b[1m\u001b[96m101\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             commands: [[0; BUFFER_SIZE]; HISTORY_SIZE],\n\u001b[1m\u001b[96m102\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             lengths: [0; HISTORY_SIZE],\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m108\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n    \u001b[1m\u001b[96m|\u001b[0m\n \u001b[1m\u001b[96m98\u001b[0m \u001b[92m+ impl Default for CommandHistory {\u001b[0m\n \u001b[1m\u001b[96m99\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m100\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m101\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m102\u001b[0m \u001b[92m+ }\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `next` can be confused for the standard trait method `std::iter::Iterator::next`","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\eldarin.rs","byte_start":4749,"byte_end":5234,"line_start":162,"line_end":177,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn next(&mut self) -> Option<&[u8]> {","highlight_start":5,"highlight_end":46},{"text":"        if !self.navigating {","highlight_start":1,"highlight_end":30},{"text":"            return None;","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.read_pos = (self.read_pos + 1) % self.count;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // If we're back at the write position, stop navigating (return to empty)","highlight_start":1,"highlight_end":82},{"text":"        if self.read_pos == self.write_pos {","highlight_start":1,"highlight_end":45},{"text":"            self.navigating = false;","highlight_start":1,"highlight_end":37},{"text":"            return None;","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let len = self.lengths[self.read_pos];","highlight_start":1,"highlight_end":47},{"text":"        Some(&self.commands[self.read_pos][..len])","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::should_implement_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\eldarin.rs:162:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m162\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub fn next(&mut self) -> Option<&[u8]> {\n\u001b[1m\u001b[96m163\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         if !self.navigating {\n\u001b[1m\u001b[96m164\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             return None;\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m176\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Some(&self.commands[self.read_pos][..len])\n\u001b[1m\u001b[96m177\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::should_implement_trait)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"manual arithmetic check found","code":{"code":"clippy::implicit_saturating_sub","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\wards_command.rs","byte_start":6788,"byte_end":6975,"line_start":134,"line_end":138,"column_start":43,"column_end":26,"is_primary":true,"text":[{"text":"                        let aslr_offset = if thread.stack_top < nominal_top {","highlight_start":43,"highlight_end":78},{"text":"                            nominal_top - thread.stack_top","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            0","highlight_start":1,"highlight_end":30},{"text":"                        };","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::implicit_saturating_sub)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\wards_command.rs","byte_start":6788,"byte_end":6975,"line_start":134,"line_end":138,"column_start":43,"column_end":26,"is_primary":true,"text":[{"text":"                        let aslr_offset = if thread.stack_top < nominal_top {","highlight_start":43,"highlight_end":78},{"text":"                            nominal_top - thread.stack_top","highlight_start":1,"highlight_end":59},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            0","highlight_start":1,"highlight_end":30},{"text":"                        };","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"nominal_top.saturating_sub(thread.stack_top)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manual arithmetic check found\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\wards_command.rs:134:43\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m134\u001b[0m \u001b[1m\u001b[96m|\u001b[0m                           let aslr_offset = if thread.stack_top < nominal_top {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m ___________________________________________^\u001b[0m\n\u001b[1m\u001b[96m135\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                             nominal_top - thread.stack_top\n\u001b[1m\u001b[96m136\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                         } else {\n\u001b[1m\u001b[96m137\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                             0\n\u001b[1m\u001b[96m138\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                         };\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_________________________^\u001b[0m \u001b[1m\u001b[93mhelp: replace it with: `nominal_top.saturating_sub(thread.stack_top)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::implicit_saturating_sub)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"found call to `str::trim` before `str::split_whitespace`","code":{"code":"clippy::trim_split_whitespace","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\fate_command.rs","byte_start":890,"byte_end":897,"line_start":23,"line_end":23,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"        args_str.trim().split_whitespace().collect()","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trim_split_whitespace","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::trim_split_whitespace)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove `trim()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\fate_command.rs","byte_start":890,"byte_end":897,"line_start":23,"line_end":23,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"        args_str.trim().split_whitespace().collect()","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: found call to `str::trim` before `str::split_whitespace`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\fate_command.rs:23:18\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m23\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         args_str.trim().split_whitespace().collect()\n   \u001b[1m\u001b[96m|\u001b[0m                  \u001b[1m\u001b[93m^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: remove `trim()`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trim_split_whitespace\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::trim_split_whitespace)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\irq_safe_mutex.rs","byte_start":1370,"byte_end":1403,"line_start":49,"line_end":49,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    pub unsafe fn force_unlock(&self) {","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\irq_safe_mutex.rs:49:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m49\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     pub unsafe fn force_unlock(&self) {\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"deref which would be done by auto-deref","code":{"code":"clippy::explicit_auto_deref","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\irq_safe_mutex.rs","byte_start":2165,"byte_end":2177,"line_start":77,"line_end":77,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        &*self.guard","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::explicit_auto_deref)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\irq_safe_mutex.rs","byte_start":2165,"byte_end":2177,"line_start":77,"line_end":77,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        &*self.guard","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"&self.guard","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: deref which would be done by auto-deref\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\irq_safe_mutex.rs:77:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m77\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         &*self.guard\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `&self.guard`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"deref which would be done by auto-deref","code":{"code":"clippy::explicit_auto_deref","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\irq_safe_mutex.rs","byte_start":2287,"byte_end":2303,"line_start":83,"line_end":83,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        &mut *self.guard","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\irq_safe_mutex.rs","byte_start":2287,"byte_end":2303,"line_start":83,"line_end":83,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        &mut *self.guard","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":"&mut self.guard","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: deref which would be done by auto-deref\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\irq_safe_mutex.rs:83:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m83\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         &mut *self.guard\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: try: `&mut self.guard`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n"}
{"$message_type":"diagnostic","message":"called `map(..).flatten()` on `Option`","code":{"code":"clippy::map_flatten","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\bpb.rs","byte_start":9314,"byte_end":9488,"line_start":263,"line_end":269,"column_start":30,"column_end":21,"is_primary":true,"text":[{"text":"        self.fsinfo.as_ref().map(|fs| {","highlight_start":30,"highlight_end":40},{"text":"            if fs.free_clusters == 0xFFFFFFFF {","highlight_start":1,"highlight_end":48},{"text":"                None","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Some(fs.free_clusters)","highlight_start":1,"highlight_end":39},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }).flatten()","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::map_flatten)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try replacing `map` with `and_then` and remove the `.flatten()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\bpb.rs","byte_start":9314,"byte_end":9488,"line_start":263,"line_end":269,"column_start":30,"column_end":21,"is_primary":true,"text":[{"text":"        self.fsinfo.as_ref().map(|fs| {","highlight_start":30,"highlight_end":40},{"text":"            if fs.free_clusters == 0xFFFFFFFF {","highlight_start":1,"highlight_end":48},{"text":"                None","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Some(fs.free_clusters)","highlight_start":1,"highlight_end":39},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }).flatten()","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"and_then(|fs| {\n            if fs.free_clusters == 0xFFFFFFFF {\n                None\n            } else {\n                Some(fs.free_clusters)\n            }\n        })","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: called `map(..).flatten()` on `Option`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\bpb.rs:263:30\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m263\u001b[0m \u001b[1m\u001b[96m|\u001b[0m           self.fsinfo.as_ref().map(|fs| {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m ______________________________^\u001b[0m\n\u001b[1m\u001b[96m264\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             if fs.free_clusters == 0xFFFFFFFF {\n\u001b[1m\u001b[96m265\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m                 None\n\u001b[1m\u001b[96m266\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             } else {\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m269\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         }).flatten()\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|____________________^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::map_flatten)]` on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: try replacing `map` with `and_then` and remove the `.flatten()`\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m263\u001b[0m \u001b[92m~ \u001b[0m        self.fsinfo.as_ref().\u001b[92mand_then(|fs| {\u001b[0m\n\u001b[1m\u001b[96m264\u001b[0m \u001b[92m+             if fs.free_clusters == 0xFFFFFFFF {\u001b[0m\n\u001b[1m\u001b[96m265\u001b[0m \u001b[92m+                 None\u001b[0m\n\u001b[1m\u001b[96m266\u001b[0m \u001b[92m+             } else {\u001b[0m\n\u001b[1m\u001b[96m267\u001b[0m \u001b[92m+                 Some(fs.free_clusters)\u001b[0m\n\u001b[1m\u001b[96m268\u001b[0m \u001b[92m+             }\u001b[0m\n\u001b[1m\u001b[96m269\u001b[0m \u001b[92m+         })\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `next` can be confused for the standard trait method `std::iter::Iterator::next`","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\fat32\\dir.rs","byte_start":5940,"byte_end":7275,"line_start":211,"line_end":248,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn next(&mut self) -> Option<DirEntry> {","highlight_start":5,"highlight_end":49},{"text":"        while self.offset + 32 <= self.data.len() {","highlight_start":1,"highlight_end":52},{"text":"            let entry_data = &self.data[self.offset..self.offset + 32];","highlight_start":1,"highlight_end":72},{"text":"            self.offset += 32;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Check for end of directory","highlight_start":1,"highlight_end":42},{"text":"            if entry_data[0] == 0x00 {","highlight_start":1,"highlight_end":39},{"text":"                return None;","highlight_start":1,"highlight_end":29},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Try parsing as LFN entry","highlight_start":1,"highlight_end":40},{"text":"            if let Some((sequence, chars)) = DirEntry::parse_lfn_entry(entry_data) {","highlight_start":1,"highlight_end":85},{"text":"                // LFN entries are in reverse order, so insert at front","highlight_start":1,"highlight_end":72},{"text":"                if sequence == 1 {","highlight_start":1,"highlight_end":35},{"text":"                    // This is the last LFN entry, prepend to buffer","highlight_start":1,"highlight_end":69},{"text":"                    self.lfn_buffer.insert(0, chars);","highlight_start":1,"highlight_end":54},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    self.lfn_buffer.insert(0, chars);","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Try parsing as regular entry","highlight_start":1,"highlight_end":44},{"text":"            if let Some(mut entry) = DirEntry::parse(entry_data) {","highlight_start":1,"highlight_end":67},{"text":"                // If we have LFN entries buffered, use them as the name","highlight_start":1,"highlight_end":73},{"text":"                if !self.lfn_buffer.is_empty() {","highlight_start":1,"highlight_end":49},{"text":"                    entry.name = self.lfn_buffer.concat();","highlight_start":1,"highlight_end":59},{"text":"                    self.lfn_buffer.clear();","highlight_start":1,"highlight_end":45},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                return Some(entry);","highlight_start":1,"highlight_end":36},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Skip invalid/deleted entries","highlight_start":1,"highlight_end":44},{"text":"            self.lfn_buffer.clear();","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        None","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\fat32\\dir.rs:211:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m211\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub fn next(&mut self) -> Option<DirEntry> {\n\u001b[1m\u001b[96m212\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         while self.offset + 32 <= self.data.len() {\n\u001b[1m\u001b[96m213\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             let entry_data = &self.data[self.offset..self.offset + 32];\n\u001b[1m\u001b[96m214\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m             self.offset += 32;\n\u001b[1m\u001b[96m...\u001b[0m   \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m247\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         None\n\u001b[1m\u001b[96m248\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":3982,"byte_end":4059,"line_start":127,"line_end":127,"column_start":30,"column_end":107,"is_primary":true,"text":[{"text":"        let sectors_needed = ((offset_in_sector + 1024 + sector_size as usize - 1) / sector_size as usize) as u32;","highlight_start":30,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":3982,"byte_end":4059,"line_start":127,"line_end":127,"column_start":30,"column_end":107,"is_primary":true,"text":[{"text":"        let sectors_needed = ((offset_in_sector + 1024 + sector_size as usize - 1) / sector_size as usize) as u32;","highlight_start":30,"highlight_end":107}],"label":null,"suggested_replacement":"(offset_in_sector + 1024).div_ceil(sector_size as usize)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\superblock.rs:127:30\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m127\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let sectors_needed = ((offset_in_sector + 1024 + sector_size as usize - 1) / sector_size as usize) as u32;\n    \u001b[1m\u001b[96m|\u001b[0m                              \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `(offset_in_sector + 1024).div_ceil(sector_size as usize)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":9882,"byte_end":9975,"line_start":244,"line_end":244,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        ((self.s_blocks_count + self.s_blocks_per_group as u64 - 1) / self.s_blocks_per_group as u64) as u32","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":9882,"byte_end":9975,"line_start":244,"line_end":244,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        ((self.s_blocks_count + self.s_blocks_per_group as u64 - 1) / self.s_blocks_per_group as u64) as u32","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":"self.s_blocks_count.div_ceil(self.s_blocks_per_group as u64)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\superblock.rs:244:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m244\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         ((self.s_blocks_count + self.s_blocks_per_group as u64 - 1) / self.s_blocks_per_group as u64) as u32\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `self.s_blocks_count.div_ceil(self.s_blocks_per_group as u64)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":12773,"byte_end":12824,"line_start":329,"line_end":329,"column_start":33,"column_end":84,"is_primary":true,"text":[{"text":"        let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":33,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\superblock.rs","byte_start":12773,"byte_end":12824,"line_start":329,"line_end":329,"column_start":33,"column_end":84,"is_primary":true,"text":[{"text":"        let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":33,"highlight_end":84}],"label":null,"suggested_replacement":"(block_size as u64).div_ceil(sector_size)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\superblock.rs:329:33\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m329\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;\n    \u001b[1m\u001b[96m|\u001b[0m                                 \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `(block_size as u64).div_ceil(sector_size)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\inode.rs","byte_start":4119,"byte_end":4170,"line_start":123,"line_end":123,"column_start":33,"column_end":84,"is_primary":true,"text":[{"text":"        let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":33,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\inode.rs","byte_start":4119,"byte_end":4170,"line_start":123,"line_end":123,"column_start":33,"column_end":84,"is_primary":true,"text":[{"text":"        let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":33,"highlight_end":84}],"label":null,"suggested_replacement":"(block_size as u64).div_ceil(sector_size)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\inode.rs:123:33\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m123\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;\n    \u001b[1m\u001b[96m|\u001b[0m                                 \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `(block_size as u64).div_ceil(sector_size)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":4984,"byte_end":5035,"line_start":168,"line_end":168,"column_start":29,"column_end":80,"is_primary":true,"text":[{"text":"    let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":29,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":4984,"byte_end":5035,"line_start":168,"line_end":168,"column_start":29,"column_end":80,"is_primary":true,"text":[{"text":"    let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;","highlight_start":29,"highlight_end":80}],"label":null,"suggested_replacement":"(block_size as u64).div_ceil(sector_size)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\extent.rs:168:29\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m168\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     let sectors_per_block = (block_size as u64 + sector_size - 1) / sector_size;\n    \u001b[1m\u001b[96m|\u001b[0m                             \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `(block_size as u64).div_ceil(sector_size)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"manually reimplementing `div_ceil`","code":{"code":"clippy::manual_div_ceil","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":9057,"byte_end":9098,"line_start":297,"line_end":297,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"    let num_blocks = (file_size + block_size - 1) / block_size;","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `.div_ceil()`","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\ext4\\extent.rs","byte_start":9057,"byte_end":9098,"line_start":297,"line_end":297,"column_start":22,"column_end":63,"is_primary":true,"text":[{"text":"    let num_blocks = (file_size + block_size - 1) / block_size;","highlight_start":22,"highlight_end":63}],"label":null,"suggested_replacement":"file_size.div_ceil(block_size)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: manually reimplementing `div_ceil`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\ext4\\extent.rs:297:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m297\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     let num_blocks = (file_size + block_size - 1) / block_size;\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mhelp: consider using `.div_ceil()`: `file_size.div_ceil(block_size)`\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n\n"}
{"$message_type":"diagnostic","message":"you should consider adding a `Default` implementation for `MockFat32Device`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\mock_fat32.rs","byte_start":687,"byte_end":1416,"line_start":22,"line_end":40,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        // Create a minimal FAT32 filesystem (128 sectors = 64KB)","highlight_start":1,"highlight_end":66},{"text":"        // NOTE: Limited to 64KB because the buddy allocator's MAX_ORDER = 10","highlight_start":1,"highlight_end":78},{"text":"        // allows maximum allocation of 64 * 2^10 = 64KB","highlight_start":1,"highlight_end":57},{"text":"        const TOTAL_SECTORS: usize = 128;","highlight_start":1,"highlight_end":42},{"text":"        const SECTOR_SIZE: usize = 512;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut data = Vec::with_capacity(TOTAL_SECTORS * SECTOR_SIZE);","highlight_start":1,"highlight_end":72},{"text":"        data.resize(TOTAL_SECTORS * SECTOR_SIZE, 0u8);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::write_boot_sector(&mut data);","highlight_start":1,"highlight_end":44},{"text":"        Self::write_fsinfo(&mut data);","highlight_start":1,"highlight_end":39},{"text":"        Self::write_backup_boot_sector(&mut data);","highlight_start":1,"highlight_end":51},{"text":"        Self::write_fat_tables(&mut data);","highlight_start":1,"highlight_end":43},{"text":"        Self::write_root_directory(&mut data);","highlight_start":1,"highlight_end":47},{"text":"        Self::write_file_data(&mut data);","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self { data }","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\mock_fat32.rs","byte_start":606,"byte_end":606,"line_start":20,"line_end":20,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl MockFat32Device {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for MockFat32Device {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: you should consider adding a `Default` implementation for `MockFat32Device`\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\mock_fat32.rs:22:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m/\u001b[0m     pub fn new() -> Self {\n\u001b[1m\u001b[96m...\u001b[0m  \u001b[1m\u001b[93m|\u001b[0m\n\u001b[1m\u001b[96m39\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         Self { data }\n\u001b[1m\u001b[96m40\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m     }\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n\u001b[1m\u001b[96mhelp\u001b[0m: try adding this\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m20\u001b[0m \u001b[92m+ impl Default for MockFat32Device {\u001b[0m\n\u001b[1m\u001b[96m21\u001b[0m \u001b[92m+     fn default() -> Self {\u001b[0m\n\u001b[1m\u001b[96m22\u001b[0m \u001b[92m+         Self::new()\u001b[0m\n\u001b[1m\u001b[96m23\u001b[0m \u001b[92m+     }\u001b[0m\n\u001b[1m\u001b[96m24\u001b[0m \u001b[92m+ }\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"slow zero-filling initialization","code":{"code":"clippy::slow_vector_initialization","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\vfs\\mock_fat32.rs","byte_start":1017,"byte_end":1119,"line_start":29,"line_end":30,"column_start":24,"column_end":54,"is_primary":true,"text":[{"text":"        let mut data = Vec::with_capacity(TOTAL_SECTORS * SECTOR_SIZE);","highlight_start":24,"highlight_end":72},{"text":"        data.resize(TOTAL_SECTORS * SECTOR_SIZE, 0u8);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::slow_vector_initialization)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider replacing this with","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\vfs\\mock_fat32.rs","byte_start":1017,"byte_end":1119,"line_start":29,"line_end":30,"column_start":24,"column_end":54,"is_primary":true,"text":[{"text":"        let mut data = Vec::with_capacity(TOTAL_SECTORS * SECTOR_SIZE);","highlight_start":24,"highlight_end":72},{"text":"        data.resize(TOTAL_SECTORS * SECTOR_SIZE, 0u8);","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":"vec![0; TOTAL_SECTORS * SECTOR_SIZE]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: slow zero-filling initialization\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\vfs\\mock_fat32.rs:29:24\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m29\u001b[0m \u001b[1m\u001b[96m|\u001b[0m           let mut data = Vec::with_capacity(TOTAL_SECTORS * SECTOR_SIZE);\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m ________________________^\u001b[0m\n\u001b[1m\u001b[96m30\u001b[0m \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|\u001b[0m         data.resize(TOTAL_SECTORS * SECTOR_SIZE, 0u8);\n   \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m|_____________________________________________________^\u001b[0m \u001b[1m\u001b[93mhelp: consider replacing this with: `vec![0; TOTAL_SECTORS * SECTOR_SIZE]`\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(clippy::slow_vector_initialization)]` on by default\n\n"}
{"$message_type":"diagnostic","message":"the loop variable `i` is only used to index `identify_data`","code":{"code":"clippy::needless_range_loop","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":5555,"byte_end":5561,"line_start":165,"line_end":165,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using an iterator","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":5550,"byte_end":5551,"line_start":165,"line_end":165,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"<item>","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":5555,"byte_end":5561,"line_start":165,"line_end":165,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":"&mut identify_data","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the loop variable `i` is only used to index `identify_data`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\ata.rs:165:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m165\u001b[0m \u001b[1m\u001b[96m|\u001b[0m             for i in 0..256 {\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n\u001b[1m\u001b[96mhelp\u001b[0m: consider using an iterator\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m165\u001b[0m \u001b[91m- \u001b[0m            for \u001b[91mi\u001b[0m in \u001b[91m0..256\u001b[0m {\n\u001b[1m\u001b[96m165\u001b[0m \u001b[92m+ \u001b[0m            for \u001b[92m<item>\u001b[0m in \u001b[92m&mut identify_data\u001b[0m {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the loop variable `i` is only used to index `identify_data`","code":{"code":"clippy::needless_range_loop","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":8607,"byte_end":8613,"line_start":270,"line_end":270,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"        for i in 0..256 {","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using an iterator","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":8602,"byte_end":8603,"line_start":270,"line_end":270,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for i in 0..256 {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"<item>","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":8607,"byte_end":8613,"line_start":270,"line_end":270,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"        for i in 0..256 {","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":"&mut identify_data","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the loop variable `i` is only used to index `identify_data`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\ata.rs:270:18\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m270\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         for i in 0..256 {\n    \u001b[1m\u001b[96m|\u001b[0m                  \u001b[1m\u001b[93m^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n\u001b[1m\u001b[96mhelp\u001b[0m: consider using an iterator\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m270\u001b[0m \u001b[91m- \u001b[0m        for \u001b[91mi\u001b[0m in \u001b[91m0..256\u001b[0m {\n\u001b[1m\u001b[96m270\u001b[0m \u001b[92m+ \u001b[0m        for \u001b[92m<item>\u001b[0m in \u001b[92m&mut identify_data\u001b[0m {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the loop variable `i` is only used to index `data`","code":{"code":"clippy::needless_range_loop","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":11863,"byte_end":11869,"line_start":361,"line_end":361,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using an iterator","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":11858,"byte_end":11859,"line_start":361,"line_end":361,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"<item>","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"heartwood\\src\\drivers\\ata.rs","byte_start":11863,"byte_end":11869,"line_start":361,"line_end":361,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"            for i in 0..256 {","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":"&mut data","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: the loop variable `i` is only used to index `data`\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\ata.rs:361:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m361\u001b[0m \u001b[1m\u001b[96m|\u001b[0m             for i in 0..256 {\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n\u001b[1m\u001b[96mhelp\u001b[0m: consider using an iterator\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m361\u001b[0m \u001b[91m- \u001b[0m            for \u001b[91mi\u001b[0m in \u001b[91m0..256\u001b[0m {\n\u001b[1m\u001b[96m361\u001b[0m \u001b[92m+ \u001b[0m            for \u001b[92m<item>\u001b[0m in \u001b[92m&mut data\u001b[0m {\n    \u001b[1m\u001b[96m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\serial.rs","byte_start":1477,"byte_end":1506,"line_start":48,"line_end":48,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    pub unsafe fn init(&mut self) {","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\serial.rs:48:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m48\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     pub unsafe fn init(&mut self) {\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\serial.rs","byte_start":2558,"byte_end":2603,"line_start":77,"line_end":77,"column_start":5,"column_end":50,"is_primary":true,"text":[{"text":"    pub unsafe fn write_byte(&mut self, byte: u8) {","highlight_start":5,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\serial.rs:77:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m77\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     pub unsafe fn write_byte(&mut self, byte: u8) {\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\serial.rs","byte_start":2792,"byte_end":2835,"line_start":85,"line_end":85,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub unsafe fn write_str(&mut self, s: &str) {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\serial.rs:85:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m85\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     pub unsafe fn write_str(&mut self, s: &str) {\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"unsafe function's docs are missing a `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\drivers\\serial.rs","byte_start":3252,"byte_end":3272,"line_start":105,"line_end":105,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"pub unsafe fn init() {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: unsafe function's docs are missing a `# Safety` section\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\drivers\\serial.rs:105:1\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m105\u001b[0m \u001b[1m\u001b[96m|\u001b[0m pub unsafe fn init() {\n    \u001b[1m\u001b[96m|\u001b[0m \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mhelp\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\security_policy.rs","byte_start":3450,"byte_end":3466,"line_start":113,"line_end":113,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    &SECURITY_POLICY","highlight_start":5,"highlight_end":21}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(static_mut_refs)]` (part of `#[warn(rust_2024_compatibility)]`) on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `&raw const` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\security_policy.rs","byte_start":3450,"byte_end":3451,"line_start":113,"line_end":113,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    &SECURITY_POLICY","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"&raw const ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\security_policy.rs:113:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m113\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     &SECURITY_POLICY\n    \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: `#[warn(static_mut_refs)]` (part of `#[warn(rust_2024_compatibility)]`) on by default\n\u001b[1m\u001b[96mhelp\u001b[0m: use `&raw const` instead to create a raw pointer\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m113\u001b[0m \u001b[1m\u001b[96m| \u001b[0m    &\u001b[92mraw const \u001b[0mSECURITY_POLICY\n    \u001b[1m\u001b[96m|\u001b[0m      \u001b[92m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\security_policy.rs","byte_start":3562,"byte_end":3578,"line_start":119,"line_end":119,"column_start":22,"column_end":38,"is_primary":true,"text":[{"text":"        let policy = &SECURITY_POLICY;","highlight_start":22,"highlight_end":38}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `&raw const` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"heartwood\\src\\mana_pool\\security_policy.rs","byte_start":3562,"byte_end":3563,"line_start":119,"line_end":119,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"        let policy = &SECURITY_POLICY;","highlight_start":22,"highlight_end":23}],"label":null,"suggested_replacement":"&raw const ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\security_policy.rs:119:22\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m119\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let policy = &SECURITY_POLICY;\n    \u001b[1m\u001b[96m|\u001b[0m                      \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\u001b[1m\u001b[96mhelp\u001b[0m: use `&raw const` instead to create a raw pointer\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m119\u001b[0m \u001b[1m\u001b[96m| \u001b[0m        let policy = &\u001b[92mraw const \u001b[0mSECURITY_POLICY;\n    \u001b[1m\u001b[96m|\u001b[0m                       \u001b[92m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"creating a mutable reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":23102,"byte_end":23122,"line_start":703,"line_end":703,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    CONCORDANCE.as_mut().expect(\"Concordance not initialized\")","highlight_start":5,"highlight_end":25}],"label":"mutable reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a mutable reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:703:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m703\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     CONCORDANCE.as_mut().expect(\"Concordance not initialized\")\n    \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mmutable reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":23267,"byte_end":23288,"line_start":708,"line_end":708,"column_start":14,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe { CONCORDANCE.is_some() }","highlight_start":14,"highlight_end":35}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:708:14\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m708\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     unsafe { CONCORDANCE.is_some() }\n    \u001b[1m\u001b[96m|\u001b[0m              \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":23405,"byte_end":23425,"line_start":714,"line_end":714,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"        CONCORDANCE.as_ref()","highlight_start":9,"highlight_end":29}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:714:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m714\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         CONCORDANCE.as_ref()\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":23618,"byte_end":23638,"line_start":723,"line_end":723,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"        CONCORDANCE.as_ref()","highlight_start":9,"highlight_end":29}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:723:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m723\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         CONCORDANCE.as_ref()\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\mana_pool\\concordance_of_fates.rs","byte_start":23837,"byte_end":23857,"line_start":732,"line_end":732,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"        CONCORDANCE.as_ref()","highlight_start":9,"highlight_end":29}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\mana_pool\\concordance_of_fates.rs:732:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m732\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         CONCORDANCE.as_ref()\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a mutable reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":10151,"byte_end":10165,"line_start":309,"line_end":309,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        TSS.write(tss);","highlight_start":9,"highlight_end":23}],"label":"mutable reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a mutable reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:309:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m309\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         TSS.write(tss);\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mmutable reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":10217,"byte_end":10238,"line_start":310,"line_end":310,"column_start":50,"column_end":71,"is_primary":true,"text":[{"text":"        let tss_ref: &'static TaskStateSegment = TSS.assume_init_ref();","highlight_start":50,"highlight_end":71}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:310:50\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m310\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let tss_ref: &'static TaskStateSegment = TSS.assume_init_ref();\n    \u001b[1m\u001b[96m|\u001b[0m                                                  \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a mutable reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":10383,"byte_end":10397,"line_start":315,"line_end":315,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        GDT.write(gdt);","highlight_start":9,"highlight_end":23}],"label":"mutable reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a mutable reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:315:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m315\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         GDT.write(gdt);\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mmutable reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":10518,"byte_end":10539,"line_start":319,"line_end":319,"column_start":55,"column_end":76,"is_primary":true,"text":[{"text":"        let gdt_ref: &'static GlobalDescriptorTable = GDT.assume_init_ref();","highlight_start":55,"highlight_end":76}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:319:55\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m319\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         let gdt_ref: &'static GlobalDescriptorTable = GDT.assume_init_ref();\n    \u001b[1m\u001b[96m|\u001b[0m                                                       \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":10884,"byte_end":10905,"line_start":335,"line_end":335,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    GDT.assume_init_ref()","highlight_start":5,"highlight_end":26}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:335:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m335\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     GDT.assume_init_ref()\n    \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\gdt.rs","byte_start":11160,"byte_end":11181,"line_start":346,"line_end":346,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    TSS.assume_init_ref()","highlight_start":5,"highlight_end":26}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\gdt.rs:346:5\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m346\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     TSS.assume_init_ref()\n    \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a mutable reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\idt.rs","byte_start":1372,"byte_end":1386,"line_start":37,"line_end":37,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        IDT.write(idt);","highlight_start":9,"highlight_end":23}],"label":"mutable reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a mutable reference to mutable static\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\idt.rs:37:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m37\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         IDT.write(idt);\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mmutable reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\idt.rs","byte_start":1458,"byte_end":1479,"line_start":41,"line_end":41,"column_start":9,"column_end":30,"is_primary":true,"text":[{"text":"        IDT.assume_init_ref().load();","highlight_start":9,"highlight_end":30}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\idt.rs:41:9\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m41\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         IDT.assume_init_ref().load();\n   \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\idt.rs","byte_start":1763,"byte_end":1784,"line_start":53,"line_end":53,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    IDT.assume_init_ref()","highlight_start":5,"highlight_end":26}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n  \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\idt.rs:53:5\n   \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m53\u001b[0m \u001b[1m\u001b[96m|\u001b[0m     IDT.assume_init_ref()\n   \u001b[1m\u001b[96m|\u001b[0m     \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m|\u001b[0m\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n   \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"creating a shared reference to mutable static","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"heartwood\\src\\attunement\\ward_of_unseen_paths.rs","byte_start":6154,"byte_end":6172,"line_start":193,"line_end":193,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        KERNEL_BASE_ACTUAL,","highlight_start":9,"highlight_end":27}],"label":"shared reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: creating a shared reference to mutable static\u001b[0m\n   \u001b[1m\u001b[96m--> \u001b[0mheartwood\\src\\attunement\\ward_of_unseen_paths.rs:193:9\n    \u001b[1m\u001b[96m|\u001b[0m\n\u001b[1m\u001b[96m193\u001b[0m \u001b[1m\u001b[96m|\u001b[0m         KERNEL_BASE_ACTUAL,\n    \u001b[1m\u001b[96m|\u001b[0m         \u001b[1m\u001b[93m^^^^^^^^^^^^^^^^^^\u001b[0m \u001b[1m\u001b[93mshared reference to mutable static\u001b[0m\n    \u001b[1m\u001b[96m|\u001b[0m\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/static-mut-references.html>\n    \u001b[1m\u001b[96m= \u001b[0m\u001b[1m\u001b[97mnote\u001b[0m: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives\n\n"}
{"$message_type":"diagnostic","message":"111 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[1m\u001b[93mwarning\u001b[0m\u001b[1m\u001b[97m: 111 warnings emitted\u001b[0m\n\n"}
