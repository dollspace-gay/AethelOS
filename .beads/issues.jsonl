{"id":"OS-1","title":"Move GDT and TSS to .rune section for hardware-enforced immutability","description":"Protect GDT (Global Descriptor Table) and TSS (Task State Segment) from data-only attacks by placing them in the .rune linker section and making them read-only via MMU after boot. This prevents privilege escalation via segment modification.","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-28T18:12:26.2889345-05:00","updated_at":"2025-10-28T18:12:36.6907823-05:00"}
{"id":"OS-10","title":"System hangs during allocation in reveal command","description":"ROOT CAUSE FOUND: Post-canary at addr+8+size is misaligned. For 1-byte alloc: pre-canary@0x400000 (aligned), user@0x400008, post-canary@0x400009 (MISALIGNED by 1 byte). write_volatile to misaligned u64 hangs. WORKAROUND: Disabled heap_canaries::init() in main.rs. FIX NEEDED: Align canaries or use unaligned write.","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-28T19:55:35.9523245-05:00","updated_at":"2025-10-28T19:55:35.9523245-05:00"}
{"id":"OS-11","title":"Implement ext4 filesystem driver","description":"Create complete ext4 driver implementing the VFS FileSystem trait. Supports reading files and directories from ext4 volumes.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:41:59.3399121-05:00","updated_at":"2025-10-28T20:47:55.3294546-05:00","closed_at":"2025-10-28T20:47:55.3294546-05:00","dependencies":[{"issue_id":"OS-11","depends_on_id":"OS-12","type":"blocks","created_at":"2025-10-28T20:42:15.9823036-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-13","type":"blocks","created_at":"2025-10-28T20:42:16.1219775-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-14","type":"blocks","created_at":"2025-10-28T20:42:16.2345901-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-15","type":"blocks","created_at":"2025-10-28T20:42:16.3494719-05:00","created_by":"daemon"}]}
{"id":"OS-12","title":"Parse ext4 superblock and group descriptors","description":"Implement ext4 superblock parsing to read filesystem metadata (block size, inode count, feature flags, etc.) and group descriptor table","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:00.2665398-05:00","updated_at":"2025-10-28T20:47:51.6506209-05:00","closed_at":"2025-10-28T20:47:51.6506209-05:00"}
{"id":"OS-13","title":"Implement ext4 inode reading and parsing","description":"Read and parse ext4 inodes from inode tables. Support both 128-byte and 256-byte inodes. Parse extent trees and block maps.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:01.2481885-05:00","updated_at":"2025-10-28T20:47:52.5541437-05:00","closed_at":"2025-10-28T20:47:52.5541437-05:00"}
{"id":"OS-14","title":"Implement ext4 extent tree navigation","description":"Parse and navigate ext4 extent trees for locating file data blocks. Support both leaf and index nodes.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:02.1604891-05:00","updated_at":"2025-10-28T20:47:53.4870003-05:00","closed_at":"2025-10-28T20:47:53.4870003-05:00"}
{"id":"OS-15","title":"Implement ext4 directory parsing","description":"Parse ext4 directory entries (both linear and htree formats). Support dir_entry_2 with file type field.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:03.0238494-05:00","updated_at":"2025-10-28T20:47:54.4071514-05:00","closed_at":"2025-10-28T20:47:54.4071514-05:00"}
{"id":"OS-16","title":"Implement ext4 filesystem driver","description":"Create complete ext4 driver implementing the VFS FileSystem trait. Supports reading files and directories from ext4 volumes.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:47:56.0515465-05:00","updated_at":"2025-10-28T20:47:56.0515465-05:00"}
{"id":"OS-17","title":"Test ext4 driver with real disk image","description":"Boot AethelOS with aethelos-test-ext4.img and verify that files can be read using reveal command","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:55:24.0356435-05:00","updated_at":"2025-10-28T20:56:52.5541347-05:00","closed_at":"2025-10-28T20:56:52.5541347-05:00"}
{"id":"OS-18","title":"Implement Ward of Sacred Boundaries (SMEP/SMAP/UDEREF)","description":"Prevent kernel from executing user code (SMEP) and accessing user pointers directly (SMAP/UDEREF). Enforce strict separation between Heartwood (kernel) and mortal lands (userspace).","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:58:13.3853096-05:00","updated_at":"2025-10-28T21:02:03.8357274-05:00","closed_at":"2025-10-28T21:02:03.8357274-05:00","dependencies":[{"issue_id":"OS-18","depends_on_id":"OS-19","type":"blocks","created_at":"2025-10-28T20:59:21.0836363-05:00","created_by":"daemon"},{"issue_id":"OS-18","depends_on_id":"OS-20","type":"blocks","created_at":"2025-10-28T20:59:21.2100791-05:00","created_by":"daemon"},{"issue_id":"OS-18","depends_on_id":"OS-21","type":"blocks","created_at":"2025-10-28T20:59:21.3235572-05:00","created_by":"daemon"}]}
{"id":"OS-19","title":"Enable SMEP and SMAP CPU features","description":"Detect and enable Supervisor Mode Execution Prevention and Supervisor Mode Access Prevention in CR4 register","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:14.3743653-05:00","updated_at":"2025-10-28T21:02:03.4763149-05:00","closed_at":"2025-10-28T21:02:03.4763149-05:00"}
{"id":"OS-2","title":"Fix paging navigation - handle SPACE and ESC keys","description":"Paging commands (permanence, wards, sigils) display 'Press SPACE/ESC' instructions but those keys aren't intercepted. They're being added to buffer as regular chars. Need to add special handling in handle_char() when PAGING_ACTIVE.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-28T18:17:22.7138962-05:00","updated_at":"2025-10-28T18:42:35.5973851-05:00","closed_at":"2025-10-28T18:42:35.5973851-05:00"}
{"id":"OS-20","title":"Implement sanctified_copy (copy_from_user/copy_to_user)","description":"Create safe functions to copy data between user and kernel space with proper validation and SMAP respect","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:15.3007566-05:00","updated_at":"2025-10-28T21:02:03.6052003-05:00","closed_at":"2025-10-28T21:02:03.6052003-05:00"}
{"id":"OS-21","title":"Add user pointer validation","description":"Implement functions to validate user space pointers before any access, ensuring they point to user space and not kernel space","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:16.24011-05:00","updated_at":"2025-10-28T21:02:03.7221032-05:00","closed_at":"2025-10-28T21:02:03.7221032-05:00"}
{"id":"OS-22","title":"Implement Ward of the Unseen Paths (KASLR)","description":"Randomize kernel base address at boot. The Heartwood itself relocates to a different location each dawn, making ancient maps useless to attackers.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:09:15.8348663-05:00","updated_at":"2025-10-28T21:12:33.3278628-05:00","closed_at":"2025-10-28T21:12:33.3278628-05:00","dependencies":[{"issue_id":"OS-22","depends_on_id":"OS-23","type":"blocks","created_at":"2025-10-28T21:10:16.6787862-05:00","created_by":"daemon"},{"issue_id":"OS-22","depends_on_id":"OS-24","type":"blocks","created_at":"2025-10-28T21:10:16.7990808-05:00","created_by":"daemon"},{"issue_id":"OS-22","depends_on_id":"OS-25","type":"blocks","created_at":"2025-10-28T21:10:16.9216097-05:00","created_by":"daemon"}]}
{"id":"OS-23","title":"Implement kernel entropy source for KASLR","description":"Create entropy generation using RDTSC/RDRAND for kernel base randomization","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:09:16.7836151-05:00","updated_at":"2025-10-28T21:12:32.9508361-05:00","closed_at":"2025-10-28T21:12:32.9508361-05:00"}
{"id":"OS-24","title":"Implement virtual address randomization for kernel","description":"Randomize kernel virtual address by sliding the higher-half mapping to a random offset (e.g., 0xFFFF_8000_0000_0000 + random_offset)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:09:17.7007358-05:00","updated_at":"2025-10-28T21:12:33.068494-05:00","closed_at":"2025-10-28T21:12:33.068494-05:00"}
{"id":"OS-25","title":"Add KASLR status to wards command","description":"Display kernel base address randomization status and entropy bits in wards command output","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:09:18.8084902-05:00","updated_at":"2025-10-28T21:12:33.2019796-05:00","closed_at":"2025-10-28T21:12:33.2019796-05:00"}
{"id":"OS-26","title":"Implement Ward of Anonymity (Symbol Hiding)","description":"Hide kernel function names and addresses from unprivileged access. The true names of the Heartwood's spirits are sealed, preventing malevolent entities from targeting specific functions.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:15:04.5289137-05:00","updated_at":"2025-10-28T21:17:16.6301328-05:00","closed_at":"2025-10-28T21:17:16.6301328-05:00","dependencies":[{"issue_id":"OS-26","depends_on_id":"OS-27","type":"blocks","created_at":"2025-10-28T21:15:08.2405341-05:00","created_by":"daemon"},{"issue_id":"OS-26","depends_on_id":"OS-28","type":"blocks","created_at":"2025-10-28T21:15:08.353954-05:00","created_by":"daemon"},{"issue_id":"OS-26","depends_on_id":"OS-29","type":"blocks","created_at":"2025-10-28T21:15:08.4693844-05:00","created_by":"daemon"}]}
{"id":"OS-27","title":"Implement symbol table with access control","description":"Create symbol table structure and authorization checks for symbol lookup","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:15:05.4732903-05:00","updated_at":"2025-10-28T21:17:16.2556986-05:00","closed_at":"2025-10-28T21:17:16.2556986-05:00"}
{"id":"OS-28","title":"Hide symbols in panic messages and errors","description":"Redact kernel function names from panic messages and error output when Ward of Anonymity is active","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:15:06.4084874-05:00","updated_at":"2025-10-28T21:17:16.399523-05:00","closed_at":"2025-10-28T21:17:16.399523-05:00"}
{"id":"OS-29","title":"Add Ward of Anonymity status to wards command","description":"Display symbol hiding status in wards command output","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:15:07.3259968-05:00","updated_at":"2025-10-28T21:17:16.5173778-05:00","closed_at":"2025-10-28T21:17:16.5173778-05:00"}
{"id":"OS-3","title":"reveal command hangs after printing path","description":"The 'reveal' command (vfs-ls) prints '◈ The World-Tree reveals: /' but then hangs. Likely hanging in fs.read_dir() call, possibly in FAT table read or block device access. Need to add debug output to isolate the hang point.","status":"in_progress","priority":0,"issue_type":"bug","assignee":"Claude","created_at":"2025-10-28T18:22:17.5899851-05:00","updated_at":"2025-10-28T18:46:06.8004692-05:00"}
{"id":"OS-30","title":"Implement Concordance of Fates (RBAC)","description":"Full Role-Based Access Control system. Every thread has a Fate that defines absolute limits of its existence. Disharmonious actions become conceptually impossible.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:19:27.5334031-05:00","updated_at":"2025-10-28T21:19:27.5334031-05:00","dependencies":[{"issue_id":"OS-30","depends_on_id":"OS-31","type":"blocks","created_at":"2025-10-28T21:19:31.4770093-05:00","created_by":"daemon"},{"issue_id":"OS-30","depends_on_id":"OS-32","type":"blocks","created_at":"2025-10-28T21:19:31.5904853-05:00","created_by":"daemon"},{"issue_id":"OS-30","depends_on_id":"OS-33","type":"blocks","created_at":"2025-10-28T21:19:31.7117181-05:00","created_by":"daemon"}]}
{"id":"OS-31","title":"Design role and capability system","description":"Create structures for roles, subjects, objects, and capabilities. Define the Fate data model.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:28.6148977-05:00","updated_at":"2025-10-28T21:19:28.6148977-05:00"}
{"id":"OS-32","title":"Implement policy enforcement engine","description":"Create fast policy lookup and enforcement. Check operations against Fate definitions.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:29.5885022-05:00","updated_at":"2025-10-28T21:19:29.5885022-05:00"}
{"id":"OS-33","title":"Integrate Concordance with Loom of Fate","description":"Assign Fates to threads. Enforce role transitions. Check thread operations against Concordance.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:30.5515306-05:00","updated_at":"2025-10-28T21:19:30.5515306-05:00"}
{"id":"OS-4","title":"Fix paging navigation - handle SPACE and ESC keys","description":"Paging commands (permanence, wards, sigils) display 'Press SPACE/ESC' instructions but those keys aren't intercepted. They're being added to buffer as regular chars. Need to add special handling in handle_char() when PAGING_ACTIVE.","status":"in_progress","priority":1,"issue_type":"bug","created_at":"2025-10-28T18:42:36.0373589-05:00","updated_at":"2025-10-28T18:42:36.0373589-05:00"}
{"id":"OS-5","title":"Allocator uses InterruptSafeLock causing hangs during VFS I/O","description":"LockedBuddyAllocator uses InterruptSafeLock which disables interrupts during allocation. This causes issues when VFS operations allocate memory. Possible solutions: 1) Use regular Mutex for allocator, 2) Avoid allocations during VFS critical sections, 3) Pre-allocate buffers","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-28T18:46:06.9166248-05:00","updated_at":"2025-10-28T18:46:06.9166248-05:00"}
{"id":"OS-6","title":"Fix Send/Sync implementation for Block in buddy allocator","description":"NonNull\u003cBlock\u003e needs Send/Sync traits for static GLOBAL_ALLOCATOR","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T18:49:47.0443983-05:00","updated_at":"2025-10-28T18:51:08.175513-05:00","closed_at":"2025-10-28T18:51:08.175513-05:00"}
{"id":"OS-7","title":"System hangs during allocation in reveal command","description":"ROOT CAUSE FOUND: Post-canary at addr+8+size is misaligned. For 1-byte alloc: pre-canary@0x400000 (aligned), user@0x400008, post-canary@0x400009 (MISALIGNED by 1 byte). write_volatile to misaligned u64 hangs. WORKAROUND: Disabled heap_canaries::init() in main.rs. FIX NEEDED: Align canaries or use unaligned write.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T18:52:09.465783-05:00","updated_at":"2025-10-28T19:55:35.4174938-05:00","closed_at":"2025-10-28T19:55:35.4174938-05:00"}
{"id":"OS-8","title":"Serial log output is corrupted/garbled","description":"Serial port output in serial.log shows garbled characters instead of readable text. Appears to be baud rate mismatch or serial port initialization issue.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T19:04:40.8690421-05:00","updated_at":"2025-10-28T20:28:57.7172135-05:00","closed_at":"2025-10-28T20:28:57.7172135-05:00"}
{"id":"OS-9","title":"Fix heap canary alignment bug","description":"FIXED \u0026 VERIFIED: aligned_size=(size+7)\u0026~7 calculated once and passed to write_canaries(). Post-canary now at addr+8+aligned_size (always 8-byte aligned). Heap canaries re-enabled and working. VGA debug traces removed. Reveal command works perfectly with heap overflow protection.","status":"closed","priority":1,"issue_type":"bug","assignee":"claude","created_at":"2025-10-28T19:52:57.4657371-05:00","updated_at":"2025-10-28T20:06:31.3955987-05:00","closed_at":"2025-10-28T19:55:26.0817136-05:00"}
