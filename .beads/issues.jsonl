{"id":"OS-1","title":"Move GDT and TSS to .rune section for hardware-enforced immutability","description":"Protect GDT (Global Descriptor Table) and TSS (Task State Segment) from data-only attacks by placing them in the .rune linker section and making them read-only via MMU after boot. This prevents privilege escalation via segment modification.","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-28T18:12:26.2889345-05:00","updated_at":"2025-10-28T18:12:36.6907823-05:00"}
{"id":"OS-10","title":"System hangs during allocation in reveal command","description":"ROOT CAUSE FOUND: Post-canary at addr+8+size is misaligned. For 1-byte alloc: pre-canary@0x400000 (aligned), user@0x400008, post-canary@0x400009 (MISALIGNED by 1 byte). write_volatile to misaligned u64 hangs. WORKAROUND: Disabled heap_canaries::init() in main.rs. FIX NEEDED: Align canaries or use unaligned write.","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-28T19:55:35.9523245-05:00","updated_at":"2025-10-28T19:55:35.9523245-05:00"}
{"id":"OS-11","title":"Implement ext4 filesystem driver","description":"Create complete ext4 driver implementing the VFS FileSystem trait. Supports reading files and directories from ext4 volumes.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:41:59.3399121-05:00","updated_at":"2025-10-28T20:47:55.3294546-05:00","closed_at":"2025-10-28T20:47:55.3294546-05:00","dependencies":[{"issue_id":"OS-11","depends_on_id":"OS-12","type":"blocks","created_at":"2025-10-28T20:42:15.9823036-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-13","type":"blocks","created_at":"2025-10-28T20:42:16.1219775-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-14","type":"blocks","created_at":"2025-10-28T20:42:16.2345901-05:00","created_by":"daemon"},{"issue_id":"OS-11","depends_on_id":"OS-15","type":"blocks","created_at":"2025-10-28T20:42:16.3494719-05:00","created_by":"daemon"}]}
{"id":"OS-12","title":"Parse ext4 superblock and group descriptors","description":"Implement ext4 superblock parsing to read filesystem metadata (block size, inode count, feature flags, etc.) and group descriptor table","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:00.2665398-05:00","updated_at":"2025-10-28T20:47:51.6506209-05:00","closed_at":"2025-10-28T20:47:51.6506209-05:00"}
{"id":"OS-13","title":"Implement ext4 inode reading and parsing","description":"Read and parse ext4 inodes from inode tables. Support both 128-byte and 256-byte inodes. Parse extent trees and block maps.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:01.2481885-05:00","updated_at":"2025-10-28T20:47:52.5541437-05:00","closed_at":"2025-10-28T20:47:52.5541437-05:00"}
{"id":"OS-14","title":"Implement ext4 extent tree navigation","description":"Parse and navigate ext4 extent trees for locating file data blocks. Support both leaf and index nodes.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:02.1604891-05:00","updated_at":"2025-10-28T20:47:53.4870003-05:00","closed_at":"2025-10-28T20:47:53.4870003-05:00"}
{"id":"OS-15","title":"Implement ext4 directory parsing","description":"Parse ext4 directory entries (both linear and htree formats). Support dir_entry_2 with file type field.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:42:03.0238494-05:00","updated_at":"2025-10-28T20:47:54.4071514-05:00","closed_at":"2025-10-28T20:47:54.4071514-05:00"}
{"id":"OS-16","title":"Implement ext4 filesystem driver","description":"Create complete ext4 driver implementing the VFS FileSystem trait. Supports reading files and directories from ext4 volumes.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:47:56.0515465-05:00","updated_at":"2025-10-28T20:47:56.0515465-05:00"}
{"id":"OS-17","title":"Test ext4 driver with real disk image","description":"Boot AethelOS with aethelos-test-ext4.img and verify that files can be read using reveal command","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T20:55:24.0356435-05:00","updated_at":"2025-10-28T20:56:52.5541347-05:00","closed_at":"2025-10-28T20:56:52.5541347-05:00"}
{"id":"OS-18","title":"Implement Ward of Sacred Boundaries (SMEP/SMAP/UDEREF)","description":"Prevent kernel from executing user code (SMEP) and accessing user pointers directly (SMAP/UDEREF). Enforce strict separation between Heartwood (kernel) and mortal lands (userspace).","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T20:58:13.3853096-05:00","updated_at":"2025-10-28T21:02:03.8357274-05:00","closed_at":"2025-10-28T21:02:03.8357274-05:00","dependencies":[{"issue_id":"OS-18","depends_on_id":"OS-19","type":"blocks","created_at":"2025-10-28T20:59:21.0836363-05:00","created_by":"daemon"},{"issue_id":"OS-18","depends_on_id":"OS-20","type":"blocks","created_at":"2025-10-28T20:59:21.2100791-05:00","created_by":"daemon"},{"issue_id":"OS-18","depends_on_id":"OS-21","type":"blocks","created_at":"2025-10-28T20:59:21.3235572-05:00","created_by":"daemon"}]}
{"id":"OS-19","title":"Enable SMEP and SMAP CPU features","description":"Detect and enable Supervisor Mode Execution Prevention and Supervisor Mode Access Prevention in CR4 register","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:14.3743653-05:00","updated_at":"2025-10-28T21:02:03.4763149-05:00","closed_at":"2025-10-28T21:02:03.4763149-05:00"}
{"id":"OS-2","title":"Fix paging navigation - handle SPACE and ESC keys","description":"Paging commands (permanence, wards, sigils) display 'Press SPACE/ESC' instructions but those keys aren't intercepted. They're being added to buffer as regular chars. Need to add special handling in handle_char() when PAGING_ACTIVE.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-28T18:17:22.7138962-05:00","updated_at":"2025-10-28T18:42:35.5973851-05:00","closed_at":"2025-10-28T18:42:35.5973851-05:00"}
{"id":"OS-20","title":"Implement sanctified_copy (copy_from_user/copy_to_user)","description":"Create safe functions to copy data between user and kernel space with proper validation and SMAP respect","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:15.3007566-05:00","updated_at":"2025-10-28T21:02:03.6052003-05:00","closed_at":"2025-10-28T21:02:03.6052003-05:00"}
{"id":"OS-21","title":"Add user pointer validation","description":"Implement functions to validate user space pointers before any access, ensuring they point to user space and not kernel space","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T20:58:16.24011-05:00","updated_at":"2025-10-28T21:02:03.7221032-05:00","closed_at":"2025-10-28T21:02:03.7221032-05:00"}
{"id":"OS-22","title":"Implement Ward of the Unseen Paths (KASLR)","description":"Randomize kernel base address at boot. The Heartwood itself relocates to a different location each dawn, making ancient maps useless to attackers.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:09:15.8348663-05:00","updated_at":"2025-10-28T21:12:33.3278628-05:00","closed_at":"2025-10-28T21:12:33.3278628-05:00","dependencies":[{"issue_id":"OS-22","depends_on_id":"OS-23","type":"blocks","created_at":"2025-10-28T21:10:16.6787862-05:00","created_by":"daemon"},{"issue_id":"OS-22","depends_on_id":"OS-24","type":"blocks","created_at":"2025-10-28T21:10:16.7990808-05:00","created_by":"daemon"},{"issue_id":"OS-22","depends_on_id":"OS-25","type":"blocks","created_at":"2025-10-28T21:10:16.9216097-05:00","created_by":"daemon"}]}
{"id":"OS-23","title":"Implement kernel entropy source for KASLR","description":"Create entropy generation using RDTSC/RDRAND for kernel base randomization","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:09:16.7836151-05:00","updated_at":"2025-10-28T21:12:32.9508361-05:00","closed_at":"2025-10-28T21:12:32.9508361-05:00"}
{"id":"OS-24","title":"Implement virtual address randomization for kernel","description":"Randomize kernel virtual address by sliding the higher-half mapping to a random offset (e.g., 0xFFFF_8000_0000_0000 + random_offset)","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:09:17.7007358-05:00","updated_at":"2025-10-28T21:12:33.068494-05:00","closed_at":"2025-10-28T21:12:33.068494-05:00"}
{"id":"OS-25","title":"Add KASLR status to wards command","description":"Display kernel base address randomization status and entropy bits in wards command output","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:09:18.8084902-05:00","updated_at":"2025-10-28T21:12:33.2019796-05:00","closed_at":"2025-10-28T21:12:33.2019796-05:00"}
{"id":"OS-26","title":"Implement Ward of Anonymity (Symbol Hiding)","description":"Hide kernel function names and addresses from unprivileged access. The true names of the Heartwood's spirits are sealed, preventing malevolent entities from targeting specific functions.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:15:04.5289137-05:00","updated_at":"2025-10-28T21:17:16.6301328-05:00","closed_at":"2025-10-28T21:17:16.6301328-05:00","dependencies":[{"issue_id":"OS-26","depends_on_id":"OS-27","type":"blocks","created_at":"2025-10-28T21:15:08.2405341-05:00","created_by":"daemon"},{"issue_id":"OS-26","depends_on_id":"OS-28","type":"blocks","created_at":"2025-10-28T21:15:08.353954-05:00","created_by":"daemon"},{"issue_id":"OS-26","depends_on_id":"OS-29","type":"blocks","created_at":"2025-10-28T21:15:08.4693844-05:00","created_by":"daemon"}]}
{"id":"OS-27","title":"Implement symbol table with access control","description":"Create symbol table structure and authorization checks for symbol lookup","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:15:05.4732903-05:00","updated_at":"2025-10-28T21:17:16.2556986-05:00","closed_at":"2025-10-28T21:17:16.2556986-05:00"}
{"id":"OS-28","title":"Hide symbols in panic messages and errors","description":"Redact kernel function names from panic messages and error output when Ward of Anonymity is active","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:15:06.4084874-05:00","updated_at":"2025-10-28T21:17:16.399523-05:00","closed_at":"2025-10-28T21:17:16.399523-05:00"}
{"id":"OS-29","title":"Add Ward of Anonymity status to wards command","description":"Display symbol hiding status in wards command output","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:15:07.3259968-05:00","updated_at":"2025-10-28T21:17:16.5173778-05:00","closed_at":"2025-10-28T21:17:16.5173778-05:00"}
{"id":"OS-3","title":"reveal command hangs after printing path","description":"The 'reveal' command (vfs-ls) prints '◈ The World-Tree reveals: /' but then hangs. Likely hanging in fs.read_dir() call, possibly in FAT table read or block device access. Need to add debug output to isolate the hang point.","status":"in_progress","priority":0,"issue_type":"bug","assignee":"Claude","created_at":"2025-10-28T18:22:17.5899851-05:00","updated_at":"2025-10-28T18:46:06.8004692-05:00"}
{"id":"OS-30","title":"Implement Concordance of Fates (RBAC)","description":"Full Role-Based Access Control system. Every thread has a Fate that defines absolute limits of its existence. Disharmonious actions become conceptually impossible.","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-28T21:19:27.5334031-05:00","updated_at":"2025-10-28T21:19:27.5334031-05:00","dependencies":[{"issue_id":"OS-30","depends_on_id":"OS-31","type":"blocks","created_at":"2025-10-28T21:19:31.4770093-05:00","created_by":"daemon"},{"issue_id":"OS-30","depends_on_id":"OS-32","type":"blocks","created_at":"2025-10-28T21:19:31.5904853-05:00","created_by":"daemon"},{"issue_id":"OS-30","depends_on_id":"OS-33","type":"blocks","created_at":"2025-10-28T21:19:31.7117181-05:00","created_by":"daemon"}]}
{"id":"OS-31","title":"Design role and capability system","description":"Create structures for roles, subjects, objects, and capabilities. Define the Fate data model.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:28.6148977-05:00","updated_at":"2025-10-28T21:19:28.6148977-05:00"}
{"id":"OS-32","title":"Implement policy enforcement engine","description":"Create fast policy lookup and enforcement. Check operations against Fate definitions.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:29.5885022-05:00","updated_at":"2025-10-28T21:19:29.5885022-05:00"}
{"id":"OS-33","title":"Integrate Concordance with Loom of Fate","description":"Assign Fates to threads. Enforce role transitions. Check thread operations against Concordance.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-28T21:19:30.5515306-05:00","updated_at":"2025-10-28T21:19:30.5515306-05:00"}
{"id":"OS-34","title":"Implement true KASLR: kernel relocation","description":"Currently KASLR only tracks offset but doesn't relocate kernel. Need to: 1) Actually move kernel to randomized address, 2) Update page tables, 3) Fix absolute addresses","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:48:53.8056355-05:00","updated_at":"2025-10-28T21:51:17.9473117-05:00","closed_at":"2025-10-28T21:51:17.9473117-05:00","dependencies":[{"issue_id":"OS-34","depends_on_id":"OS-36","type":"blocks","created_at":"2025-10-28T21:49:07.3463317-05:00","created_by":"daemon"},{"issue_id":"OS-34","depends_on_id":"OS-37","type":"blocks","created_at":"2025-10-28T21:49:07.4631998-05:00","created_by":"daemon"}]}
{"id":"OS-35","title":"Make kernel position-independent (PIE)","description":"Convert kernel to PIE/PIC so it can run at any virtual address. Need -fPIE compiler flags and GOT/PLT setup","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:48:54.7743359-05:00","updated_at":"2025-10-29T16:06:09.5939363-05:00","closed_at":"2025-10-29T16:06:09.5939363-05:00","dependencies":[{"issue_id":"OS-35","depends_on_id":"OS-34","type":"blocks","created_at":"2025-10-28T21:49:07.5923363-05:00","created_by":"daemon"}]}
{"id":"OS-36","title":"KASLR: Update page tables for randomized base","description":"Modify page table setup to map kernel at KASLR-randomized address instead of fixed 0xFFFF_8000_0000_0000","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T21:48:55.7265205-05:00","updated_at":"2025-10-28T21:54:56.730302-05:00","closed_at":"2025-10-28T21:54:56.730302-05:00"}
{"id":"OS-37","title":"KASLR: Fix up absolute addresses (relocations)","description":"Process ELF relocations to fix absolute addresses after kernel is moved to randomized location","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:48:56.8522604-05:00","updated_at":"2025-10-28T21:59:51.7121954-05:00","closed_at":"2025-10-28T21:59:51.7121954-05:00"}
{"id":"OS-38","title":"KASLR: Fix up absolute addresses (relocations)","description":"Process ELF relocations to fix absolute addresses after kernel is moved to randomized location","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T21:58:00.9298354-05:00","updated_at":"2025-10-28T23:08:23.0479456-05:00","closed_at":"2025-10-28T23:08:23.0479456-05:00"}
{"id":"OS-39","title":"KASLR Phase 2/3 causes early boot corruption (VWG garbage pattern)","description":"Adding KASLR Phase 2 (page table aliasing) and Phase 3 (ELF relocations) causes garbage output and hang even when KASLR offset=0 and code doesn't run. Corruption appears immediately after serial port init. Need to investigate: stack overflow, BSS corruption, or memory layout issues caused by compilation artifacts.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T22:18:20.060053-05:00","updated_at":"2025-10-28T22:40:29.6802015-05:00","closed_at":"2025-10-28T22:40:29.6802015-05:00"}
{"id":"OS-4","title":"Fix paging navigation - handle SPACE and ESC keys","description":"Paging commands (permanence, wards, sigils) display 'Press SPACE/ESC' instructions but those keys aren't intercepted. They're being added to buffer as regular chars. Need to add special handling in handle_char() when PAGING_ACTIVE.","status":"in_progress","priority":1,"issue_type":"bug","created_at":"2025-10-28T18:42:36.0373589-05:00","updated_at":"2025-10-28T18:42:36.0373589-05:00"}
{"id":"OS-40","title":"Preserve and parse Multiboot2 info for KASLR offset reading","description":"boot32.rs must save EBX (Multiboot2 info pointer) and pass it to _start. Then parse Multiboot2 boot info structure to read the kernel load base address for proper KASLR implementation. Prerequisite: PIE kernel compilation (complete). Blocked: OS-39 (resolved via PIE).","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T22:49:34.5837922-05:00","updated_at":"2025-10-28T23:06:12.8503182-05:00","closed_at":"2025-10-28T23:06:12.8503182-05:00"}
{"id":"OS-41","title":"Complete Limine bootloader migration for KASLR support","description":"MAJOR REFACTORING: Migrate from Multiboot2+GRUB to Limine native protocol for true KASLR. ✓ Downloaded Limine v10.x binaries, ✓ Created ISO structure (EFI/BOOT/), ✓ Created limine.cfg with kaslr:yes, ✓ Added limine crate v0.3, ✓ Updated linker script (removed Multiboot2, added .requests section, changed ENTRY to kmain). REMAINING: Create Limine request structures (BaseRevision, ExecutableAddress, MemoryMap), replace _start() with kmain() entry, remove boot32.rs (32-bit bootstrap), remove Multiboot2 parsing, update ISO build to use xorriso (not grub-mkrescue), test boot.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T23:41:56.574392-05:00","updated_at":"2025-10-29T00:02:53.6053475-05:00","closed_at":"2025-10-29T00:02:53.6053475-05:00"}
{"id":"OS-42","title":"Kernel panic during boot: vmm misaligned map_pages()","description":"PANIC: vmm: Misaligned call to map_pages() during Limine boot. Stack trace shows: panic \u003c- map_pages \u003c- limine_load \u003c- boot \u003c- _menu. This suggests an alignment issue in the virtual memory manager during early boot page table setup. The ISO contains an old kernel build that needs to be rebuilt with current code.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T00:34:49.651221-05:00","updated_at":"2025-10-29T00:50:40.5862464-05:00","closed_at":"2025-10-29T00:50:40.5862464-05:00"}
{"id":"OS-43","title":"Kernel panic during boot: vmm misaligned map_pages()","description":"PANIC: vmm: Misaligned call to map_pages() during Limine boot. Stack trace shows: panic \u003c- map_pages \u003c- limine_load \u003c- boot \u003c- _menu. This suggests an alignment issue in the virtual memory manager during early boot page table setup. The ISO contains an old kernel build that needs to be rebuilt with current code.","status":"in_progress","priority":0,"issue_type":"bug","created_at":"2025-10-29T00:50:40.8748955-05:00","updated_at":"2025-10-29T00:50:40.8748955-05:00"}
{"id":"OS-44","title":"Black screen on Limine boot - need framebuffer/terminal protocol","description":"Kernel boots without panic, but displays black screen. GRUB sets up VGA text mode automatically, but Limine requires explicit framebuffer or terminal protocol request. Need to add Limine terminal protocol or framebuffer request to display output.","status":"in_progress","priority":0,"issue_type":"bug","created_at":"2025-10-29T00:50:41.5076023-05:00","updated_at":"2025-10-29T01:32:16.6166315-05:00"}
{"id":"OS-45","title":"Add debug endpoints to every boot process function","description":"Add serial_println! debug output to every function in the boot process to track execution flow","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-29T04:01:47.7602806-05:00","updated_at":"2025-10-29T04:09:15.9323969-05:00","closed_at":"2025-10-29T04:09:15.9323969-05:00"}
{"id":"OS-46","title":"Kernel hangs when calling FRAMEBUFFER_REQUEST.get_response()","description":"FRAMEBUFFER_REQUEST.get_response() hangs when called after interrupts are enabled. Other Limine requests (MEMORY_MAP, HHDM, KERNEL_ADDRESS) work fine. Workaround: Use identity-mapped 0xb8000 directly. Root cause unknown - needs investigation of Limine request/response mechanism with interrupts enabled.","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-29T12:24:15.2240618-05:00","updated_at":"2025-10-29T12:25:41.0566655-05:00"}
{"id":"OS-47","title":"Fix concordance initialization order - heap allocator must init first","description":"Concordance was being initialized in attunement::init() before global allocator was ready. This caused hangs when trying to allocate Strings. Fix: moved init_concordance() to heartwood_init() after allocator initialization.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T15:12:34.9843527-05:00","updated_at":"2025-10-29T15:12:42.8816428-05:00","closed_at":"2025-10-29T15:12:42.8816428-05:00"}
{"id":"OS-48","title":"CRITICAL: Stack/heap collision at 8MB causing corruption","description":"Stack was at 0x800000 (8MB) but heap range was 0x400000-0xC00000 (4MB-12MB). Stack was in middle of heap! When concordance allocated Strings and stack grew, they overwrote each other. Fix: moved stack to 0x1000000 (16MB), 4MB above heap end.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T15:16:31.2109746-05:00","updated_at":"2025-10-29T15:16:38.5417644-05:00","closed_at":"2025-10-29T15:16:38.5417644-05:00"}
{"id":"OS-49","title":"CRITICAL: Heap overlapping with GRUB module causing corruption","description":"Heap was at 4MB-12MB but GRUB module is at 1MB-10.3MB. Allocations corrupted the module! Fix: moved heap to 32MB-40MB, well above module and stack (16MB). Memory map: Module 1-10MB, Stack @16MB, Heap 32-40MB, Kernel code @~120MB (KASLR randomized).","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T15:23:51.3800675-05:00","updated_at":"2025-10-29T15:23:59.5333671-05:00","closed_at":"2025-10-29T15:23:59.5333671-05:00"}
{"id":"OS-5","title":"Allocator uses InterruptSafeLock causing hangs during VFS I/O","description":"LockedBuddyAllocator uses InterruptSafeLock which disables interrupts during allocation. This causes issues when VFS operations allocate memory. Possible solutions: 1) Use regular Mutex for allocator, 2) Avoid allocations during VFS critical sections, 3) Pre-allocate buffers","status":"in_progress","priority":0,"issue_type":"bug","created_at":"2025-10-28T18:46:06.9166248-05:00","updated_at":"2025-10-30T15:59:09.4641592-05:00"}
{"id":"OS-50","title":"KASLR partially working - concordance completes but kernel hangs in mana_pool","description":"Major progress: Allocator initializes, concordance completes successfully with String allocations. Issue: Mixed allocation results - some use correct 32MB heap ([H=]), others have bad addresses below 16MB (M!R\u003c). Likely cause: static variables with incorrect relocated addresses. Kernel hangs during mana_pool initialization.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-29T15:51:38.8815738-05:00","updated_at":"2025-10-29T16:06:08.5496297-05:00","closed_at":"2025-10-29T16:06:08.5496297-05:00"}
{"id":"OS-51","title":"KASLR address-dependent hang during concordance String allocations","description":"Address-dependent hang: Works at 0x05a00000 and 0x07a00000, hangs at 0x04c00000 and 0x06800000. Pattern suggests issue with specific memory regions. Concordance completes at working addresses, hangs during define_default_fates() at failing addresses. Likely: 1) Heap corruption at certain addresses, 2) Free list corruption during buddy coalescing, 3) Address calculation overflow in buddy allocator","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T16:09:54.3067395-05:00","updated_at":"2025-10-29T16:28:03.6909244-05:00","closed_at":"2025-10-29T16:28:03.6909244-05:00"}
{"id":"OS-52","title":"VGA WRITER static corruption causes println hangs with KASLR","description":"Root cause: format_args!() corrupted by KASLR relocations. Pattern VWG+@$%#E[]D shows: V=print called, W=writer init, G=get writer, +=got lock, @$%#=GARBAGE FROM format_args, E=write done. The format machinery (vtables, trait objects, or embedded string slices) has incorrect addresses after relocation. Workaround: Redirect println to serial. Fix needed: Ensure all format_args metadata is properly relocated or use position-independent formatting","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T16:19:13.4343091-05:00","updated_at":"2025-10-30T14:28:18.2865352-05:00","closed_at":"2025-10-30T14:28:18.2865352-05:00"}
{"id":"OS-53","title":"Kernel hangs during Scheduler::new_boxed in loom_of_fate init","description":"Kernel consistently hangs at loom_of_fate init markers '1A' (line 60-62). Location: About to call Scheduler::new_boxed(). This happens at ALL KASLR addresses after other init completes. Scheduler::new_boxed allocates scheduler on heap with Vec::with_capacity(16) for threads/stacks. Likely causes: 1) Heap allocator deadlock/corruption during Vec allocation, 2) Stack overflow during boxed creation, 3) Infinite loop in buddy allocator. Need to: Add debug markers to Scheduler::new_boxed, check if Vec::with_capacity completes, verify heap state","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T16:28:14.7778773-05:00","updated_at":"2025-10-30T14:28:19.1912006-05:00","closed_at":"2025-10-30T14:28:19.1912006-05:00"}
{"id":"OS-54","title":"KASLR relocation bug: Address-dependent hangs during boot","description":"INVESTIGATION EXHAUSTED - RECOMMENDATION: DISABLE PIE\n\nALL ATTEMPTED FIXES FAILED OR MADE IT WORSE:\n\nTest Results:\n- Baseline: 13 allocations\n- Separate PHDR segments: 17 allocations (BEST)\n- 8K page size: Hung in attunement (WORSE)\n- -z notext linker flag: Hung in attunement (WORSE)\n- relocation-model static: Linker errors (incompatible)\n- 4K struct alignment: 2 allocations (MUCH WORSE)\n\nKEY FINDINGS:\n1. Relocations are correct (3,605 R_X86_64_RELATIVE properly applied)\n2. Bug is NOT code generation or linker issue\n3. Bug is address-dependent runtime behavior\n4. ANY code/layout change shifts bug to different address\n5. Forcing alignment made it WORSE (17\\u21922 allocations)\n\nCONCLUSION: The bug is an obscure Rust runtime issue at specific addresses that cannot be fixed without:\n- Deep GDB debugging to find exact instruction/data causing failure\n- Updating to different Rust nightly (may help or make worse)\n- Waiting for upstream Rust PIE improvements\n- Or DISABLING PIE entirely\n\nFINAL RECOMMENDATION: **DISABLE PIE**\n- Remove -pie linker flag\n- Use fixed kernel address (no KASLR)\n- Eliminates all address-dependent bugs\n- Allows stable development\n- Re-enable KASLR in future when Rust improves","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T17:21:03.0592309-05:00","updated_at":"2025-10-29T18:17:46.296766-05:00","closed_at":"2025-10-29T18:17:46.296766-05:00"}
{"id":"OS-55","title":"KASLR relocation bug: Address-dependent hangs during boot","description":"INVESTIGATION COMPLETE - ROOT CAUSE CONFIRMED\n\nFINAL DIAGNOSIS: Rust PIE codegen is CORRECT. Bug is runtime address-dependent behavior.\n\nKEY FINDING: Testing 'relocation-model: static' revealed:\n- Generated R_X86_64_32S and R_X86_64_64 (absolute) relocations\n- These are INCOMPATIBLE with PIE (linker errors)\n- Proves 'pic' model was generating CORRECT R_X86_64_RELATIVE relocations\n- Confirms: NOT a relocation generation issue\n\nBEST WORKING STATE: 17/18 allocations (94%) with:\n- relocation-model: pic (correct for PIE)\n- code-model: small\n- Separate PHDR segments in linker.ld\n- KASLR fixed at 0x05a00000\n\nROOT CAUSE: Unknown runtime behavior, likely:\n1. Uninitialized memory with address-sensitive values\n2. Integer overflow in Rust core/alloc at certain addresses  \n3. Alignment issues with specific address patterns\n4. Format string metadata corruption at runtime\n\nCONCLUSION: Accept 94% success as best achievable until:\n- Rust nightly PIE support matures\n- Or disable PIE entirely for stable development\n- Or deep runtime debugging with GDB identifies exact cause","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T18:14:37.0670127-05:00","updated_at":"2025-10-30T14:28:33.5795085-05:00","closed_at":"2025-10-30T14:28:33.5795085-05:00"}
{"id":"OS-56","title":"KASLR relocation bug: Address-dependent hangs during boot","description":"INVESTIGATION EXHAUSTED - RECOMMENDATION: DISABLE PIE\n\nALL ATTEMPTED FIXES FAILED OR MADE IT WORSE:\n\nTest Results:\n- Baseline: 13 allocations\n- Separate PHDR segments: 17 allocations (BEST)\n- 8K page size: Hung in attunement (WORSE)\n- -z notext linker flag: Hung in attunement (WORSE)\n- relocation-model static: Linker errors (incompatible)\n- 4K struct alignment: 2 allocations (MUCH WORSE)\n\nKEY FINDINGS:\n1. Relocations are correct (3,605 R_X86_64_RELATIVE properly applied)\n2. Bug is NOT code generation or linker issue\n3. Bug is address-dependent runtime behavior\n4. ANY code/layout change shifts bug to different address\n5. Forcing alignment made it WORSE (17\\u21922 allocations)\n\nCONCLUSION: The bug is an obscure Rust runtime issue at specific addresses that cannot be fixed without:\n- Deep GDB debugging to find exact instruction/data causing failure\n- Updating to different Rust nightly (may help or make worse)\n- Waiting for upstream Rust PIE improvements\n- Or DISABLING PIE entirely\n\nFINAL RECOMMENDATION: **DISABLE PIE**\n- Remove -pie linker flag\n- Use fixed kernel address (no KASLR)\n- Eliminates all address-dependent bugs\n- Allows stable development\n- Re-enable KASLR in future when Rust improves","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-29T18:17:47.1828414-05:00","updated_at":"2025-10-30T14:28:34.5399591-05:00","closed_at":"2025-10-30T14:28:34.5399591-05:00"}
{"id":"OS-57","title":"Implement Runic Forge in Ring 1","description":"Build the Runic Forge compiler as a Ring 1 privileged service. Phases: (1) Ring 1 infrastructure, (2) User-mode threads, (3) Service loader, (4) Syscall interface, (5) Service management, (6) Runic Forge compiler","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-29T18:47:53.9046371-05:00","updated_at":"2025-10-29T18:47:53.9046371-05:00"}
{"id":"OS-58","title":"Ring 3 boot hang: function name collision","description":"Not a name collision - tested with create_ring3_thread. Still hangs. Testing if fn() -\u003e ! parameter triggers security check.","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-29T23:12:42.1784182-05:00","updated_at":"2025-10-29T23:14:49.9251334-05:00"}
{"id":"OS-59","title":"Fix syscall handler causing boot hang","description":"The INT 0x80 syscall handler registration in idt.rs causes an infinite memcpy loop during boot. Need to investigate and fix the naked function implementation.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-30T13:48:04.4343004-05:00","updated_at":"2025-10-30T14:17:18.7015658-05:00","closed_at":"2025-10-30T14:17:18.7015658-05:00"}
{"id":"OS-6","title":"Fix Send/Sync implementation for Block in buddy allocator","description":"NonNull\u003cBlock\u003e needs Send/Sync traits for static GLOBAL_ALLOCATOR","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T18:49:47.0443983-05:00","updated_at":"2025-10-28T18:51:08.175513-05:00","closed_at":"2025-10-28T18:51:08.175513-05:00"}
{"id":"OS-60","title":"Test syscall handler with userspace program","description":"Create a test userspace program that invokes INT 0x80 to verify the syscall handler works correctly. Test sys_yield, sys_write, sys_getpid, and sys_gettid.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T13:51:34.8774901-05:00","updated_at":"2025-10-30T13:51:34.8774901-05:00","dependencies":[{"issue_id":"OS-60","depends_on_id":"OS-61","type":"blocks","created_at":"2025-10-30T14:24:23.2773007-05:00","created_by":"daemon"}]}
{"id":"OS-61","title":"Implement syscall/sysret mechanism for userspace","description":"Implement modern syscall/sysret MSR-based system calls following Redox OS and Linux patterns. See docs/SYSCALL_SYSRET_IMPLEMENTATION.md for detailed implementation guide. Blocked by per-CPU data structures and userspace loader.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-30T14:24:22.2315206-05:00","updated_at":"2025-10-30T14:24:22.2315206-05:00"}
{"id":"OS-62","title":"Implement per-CPU data structures with GS register","description":"Create per-CPU data structures accessible via GS register for fast access to kernel stack pointer, current thread, and other CPU-local data. Required for syscall/sysret implementation.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T14:34:43.5921069-05:00","updated_at":"2025-10-30T14:37:22.1420967-05:00","closed_at":"2025-10-30T14:37:22.1420967-05:00"}
{"id":"OS-63","title":"Create ELF loader for userspace programs","description":"Implemented ELF64 parser with header validation, program header parsing, and segment validation. Ready to load userspace programs once page tables are set up.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T14:41:02.3611213-05:00","updated_at":"2025-10-30T14:41:03.3643822-05:00","closed_at":"2025-10-30T14:41:03.3643822-05:00"}
{"id":"OS-64","title":"Fix syscall deadlock - improper per-CPU kernel stack setup","description":"The per-CPU kernel stack is initialized with current RSP instead of a dedicated stack, causing corruption when syscalls switch stacks. Need to allocate proper per-CPU syscall stacks.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T15:45:16.971139-05:00","updated_at":"2025-10-30T15:50:35.726727-05:00","closed_at":"2025-10-30T15:50:35.726727-05:00"}
{"id":"OS-65","title":"Fix allocator deadlock during ext4 mounting","description":"ext4 mounting hangs due to allocator InterruptSafeLock deadlock (see OS-5). Need to refactor allocator locking or use lock-free allocator for VFS I/O operations.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-30T15:53:23.0713502-05:00","updated_at":"2025-10-30T15:53:23.0713502-05:00","dependencies":[{"issue_id":"OS-65","depends_on_id":"OS-5","type":"blocks","created_at":"2025-10-30T15:53:23.1051861-05:00","created_by":"daemon"}]}
{"id":"OS-66","title":"Fix syscall/allocator deadlock - reentrant locking during println operations","description":"System deadlocks when syscalls are enabled. The allocator lock is acquired but never released, suggesting reentrant allocation during VGA printf operations. Occurs after shell initialization during storage detection. Symptoms: infinite spinning on InterruptSafeLock, '3HXYV' garbage in serial output suggesting corruption.","status":"open","priority":0,"issue_type":"bug","created_at":"2025-10-30T16:54:25.689711-05:00","updated_at":"2025-10-30T16:54:25.689711-05:00"}
{"id":"OS-67","title":"Phase 1: TSS Integration - Add get_tss_mut and set_kernel_stack functions","description":"Add mutable TSS accessor and kernel stack update function. Export from attunement module. Estimated: 15 min","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-30T19:55:49.5320515-05:00","updated_at":"2025-10-30T19:58:26.6229511-05:00","closed_at":"2025-10-30T19:58:26.6229511-05:00"}
{"id":"OS-68","title":"Phase 2: Harbor-LOOM Integration - Connect Harbor with thread scheduler","description":"Add global Harbor, update context switch to update TSS.rsp[0], add create_user_thread(). Estimated: 30 min","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-30T19:55:51.0818527-05:00","updated_at":"2025-10-30T20:03:29.5657057-05:00","closed_at":"2025-10-30T20:03:29.5657057-05:00","dependencies":[{"issue_id":"OS-68","depends_on_id":"OS-67","type":"blocks","created_at":"2025-10-30T19:56:06.0105731-05:00","created_by":"daemon"}]}
{"id":"OS-69","title":"Phase 3: User Thread Context - Implement ring 3 thread entry","description":"Add ThreadContext::new_user_mode(), enter_user_mode() with IRETQ, implement user thread creation. Estimated: 30 min","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-30T19:55:52.5861689-05:00","updated_at":"2025-10-30T20:11:44.6211005-05:00","closed_at":"2025-10-30T20:11:44.6211005-05:00","dependencies":[{"issue_id":"OS-69","depends_on_id":"OS-68","type":"blocks","created_at":"2025-10-30T19:56:06.1526563-05:00","created_by":"daemon"}]}
{"id":"OS-7","title":"System hangs during allocation in reveal command","description":"ROOT CAUSE FOUND: Post-canary at addr+8+size is misaligned. For 1-byte alloc: pre-canary@0x400000 (aligned), user@0x400008, post-canary@0x400009 (MISALIGNED by 1 byte). write_volatile to misaligned u64 hangs. WORKAROUND: Disabled heap_canaries::init() in main.rs. FIX NEEDED: Align canaries or use unaligned write.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T18:52:09.465783-05:00","updated_at":"2025-10-28T19:55:35.4174938-05:00","closed_at":"2025-10-28T19:55:35.4174938-05:00"}
{"id":"OS-70","title":"Phase 4: Test User Program - Write and embed hello world","description":"Write user space hello.rs, compile to ELF, embed in kernel, add test-user shell command. Estimated: 45 min","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-30T19:55:54.1155668-05:00","updated_at":"2025-10-30T20:24:32.1085051-05:00","closed_at":"2025-10-30T20:24:32.1085051-05:00","dependencies":[{"issue_id":"OS-70","depends_on_id":"OS-69","type":"blocks","created_at":"2025-10-30T19:56:06.3044447-05:00","created_by":"daemon"}]}
{"id":"OS-71","title":"Phase 5: Integration Testing - Test full ring 3 execution cycle","description":"Boot system, test test-user command, verify syscalls work, debug issues. Estimated: 30 min","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-30T19:55:55.7025969-05:00","updated_at":"2025-10-30T20:24:51.1710323-05:00","dependencies":[{"issue_id":"OS-71","depends_on_id":"OS-70","type":"blocks","created_at":"2025-10-30T19:56:06.4305305-05:00","created_by":"daemon"}]}
{"id":"OS-72","title":"Merge overlapping ELF segments that share pages","description":"When ELF segments are page-aligned, multiple segments can map to the same page. Need to detect and merge these segments before adding to address space.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T21:04:09.3659923-05:00","updated_at":"2025-10-30T21:06:11.2909336-05:00","closed_at":"2025-10-30T21:06:11.2909336-05:00"}
{"id":"OS-73","title":"Fixed user stack address mismatch causing userspace hang","description":"The test-user command was using a hardcoded stack address instead of the actual stack allocated by the vessel's address space. This caused the user thread to reference an invalid/unmapped stack when switching to ring 3.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T21:18:16.6106035-05:00","updated_at":"2025-10-30T21:18:17.6159465-05:00","closed_at":"2025-10-30T21:18:17.6159465-05:00"}
{"id":"OS-74","title":"Use IRETQ-based context switch for user-mode threads","description":"switch_context_cooperative uses RET which cannot change privilege levels. User threads (ring 3) require IRETQ to properly transition from ring 0 to ring 3.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T21:24:23.9691599-05:00","updated_at":"2025-10-30T21:24:24.8836957-05:00","closed_at":"2025-10-30T21:24:24.8836957-05:00"}
{"id":"OS-75","title":"Disable SMAP with STAC during context switch to user mode","description":"SMAP prevents kernel from writing to USER_ACCESSIBLE pages. When building IRETQ frame on user stack, we need to temporarily disable SMAP using STAC instruction.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T21:28:23.0182599-05:00","updated_at":"2025-10-30T21:28:23.9442722-05:00","closed_at":"2025-10-30T21:28:23.9442722-05:00"}
{"id":"OS-76","title":"Build IRETQ frame on kernel stack to avoid SMAP issues","description":"Changed context switch to build IRETQ frame on kernel stack instead of user stack. This eliminates SMAP/STAC issues entirely.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-30T21:34:20.9597129-05:00","updated_at":"2025-10-30T21:34:21.8874409-05:00","closed_at":"2025-10-30T21:34:21.8874409-05:00"}
{"id":"OS-77","title":"Move kernel to higher half for proper user-space isolation","description":"Higher-half kernel implementation COMPLETE! All 7 phases implemented. Kernel now runs at 0xFFFFFFFF80000000 (top 2GB, -mcmodel=kernel). Boot successful, ISO created. Ready for user-space context switch testing.","status":"in_progress","priority":0,"issue_type":"bug","created_at":"2025-10-30T22:49:49.2865723-05:00","updated_at":"2025-10-30T23:19:35.7772056-05:00"}
{"id":"OS-8","title":"Serial log output is corrupted/garbled","description":"Serial port output in serial.log shows garbled characters instead of readable text. Appears to be baud rate mismatch or serial port initialization issue.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T19:04:40.8690421-05:00","updated_at":"2025-10-28T20:28:57.7172135-05:00","closed_at":"2025-10-28T20:28:57.7172135-05:00"}
{"id":"OS-9","title":"Fix heap canary alignment bug","description":"FIXED \u0026 VERIFIED: aligned_size=(size+7)\u0026~7 calculated once and passed to write_canaries(). Post-canary now at addr+8+aligned_size (always 8-byte aligned). Heap canaries re-enabled and working. VGA debug traces removed. Reveal command works perfectly with heap overflow protection.","status":"closed","priority":1,"issue_type":"bug","assignee":"claude","created_at":"2025-10-28T19:52:57.4657371-05:00","updated_at":"2025-10-28T20:06:31.3955987-05:00","closed_at":"2025-10-28T19:55:26.0817136-05:00"}
